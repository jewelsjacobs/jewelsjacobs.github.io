<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Dev Gal]]></title>
  <link href="http://html5devgal.com//atom.xml" rel="self"/>
  <link href="http://html5devgal.com//"/>
  <updated>2013-06-08T11:04:26-05:00</updated>
  <id>http://html5devgal.com//</id>
  <author>
    <name><![CDATA[Julia Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress TOC and codeblock Codeblocks]]></title>
    <link href="http://html5devgal.com//blog/2013/06/08/octopress-toc-and-coderay-codeblocks/"/>
    <updated>2013-06-08T10:19:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/08/octopress-toc-and-coderay-codeblocks</id>
    <content type="html"><![CDATA[<p>I&rsquo;m trying to create a table of contents in my Octopress blog with kramdown.
 I&rsquo;m having some issues.</p>

<p>I want to use kramdown tags with &lsquo;:&rsquo; in them, ie.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{:toc}</span></code></pre></td></tr></table></div></figure>


<p>and codeblock code blocks</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{:ang="javascript"}</span></code></pre></td></tr></table></div></figure>


<p>in my Octopress blog but I keep getting this error when running</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[my user dir]/.rvm/rubies/ruby-1.9.3-p392/lib/ruby/1.9.1/psych.rb:203:in
</span><span class='line'>  parse: (&lt;unknown>): could not find expected ':'
</span><span class='line'>  while scanning a simple key at line 8 column 1 (Psych::SyntaxError)</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve managed to solve my codeblock code block issues thanks to [this plugin]
(<a href="https://github.com/codebykat/blog/blob">https://github.com/codebykat/blog/blob</a>
/2f6c9615c02869dca5f52921ac5eb7e0b35a6427/plugins/code_ray_block.rb) and
following the instructions in <a href="http://blog.codebykat%0A.com/2013/05/23/gorgeous-octopress-codeblocks-with-codeblock/">this blog post</a></p>

<p>I have installed the kramdown and codeblock gems and made the following changes to my _config.yml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>markdown: kramdown
</span><span class='line'>kramdown:
</span><span class='line'>   auto_ids: true
</span><span class='line'>   use_codeblock: true
</span><span class='line'>     codeblock:
</span><span class='line'>       codeblock_line_numbers: nil
</span><span class='line'>       codeblock_css: class</span></code></pre></td></tr></table></div></figure>


<p>My blogpost toc code looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: "resources"
</span><span class='line'>date: 2013-06-06 10:45
</span><span class='line'>comments: true
</span><span class='line'>sharing: true
</span><span class='line'>footer: true
</span><span class='line'>categories: [3D UI, css, CSS3D, HTML5, javaScript, three.js,
</span><span class='line'>smart tv, grunt, jQuery, node.js, bootstrap, css,
</span><span class='line'>responsive design, api, learning, backbone.js, knockout.js]
</span><span class='line'>---
</span><span class='line'>#Resources
</span><span class='line'>{:toc}
</span><span class='line'>## **Performance and Caching**
</span><span class='line'>* [Varnish](https://www.varnish-cache.org/)
</span><span class='line'>{:toc}
</span><span class='line'>## **SmartTV**
</span><span class='line'>* [Samsung Development Guide](http://www.samsungdforum.com/Guide/)
</span><span class='line'>* [Basic SmartTV Node App Server](https://github.com/rposbo/basic-smart-tv-app-server)
</span><span class='line'>{:toc} [ .. snip .. ]</span></code></pre></td></tr></table></div></figure>


<p>Without the : tags the site generates fine.</p>

<p>I&rsquo;m trying to get some help on this.  I&rsquo;ll update this post when I get a
working solution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic JavaScript Linting Fixes]]></title>
    <link href="http://html5devgal.com//blog/2013/06/05/automatic-javascript-linting-fixes/"/>
    <updated>2013-06-05T20:14:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/05/automatic-javascript-linting-fixes</id>
    <content type="html"><![CDATA[<p>I was getting sick of manually fixing <a href="https://developers.google.com/closure/utilities/">closure linter</a> errors one
by one so I created a shell script to do this recursivley over a directory or with a single file.</p>

<p>  <!-- more --></p>

<p>Requires <a href="https://developers.google.com/closure/compiler/">closure compiler</a></p>

<div><script src='https://gist.github.com/5718645.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertically and Horizontally Center With Twitter Bootstrap (Responsive)]]></title>
    <link href="http://html5devgal.com//blog/2013/05/29/vertically-and-horizontally-center-with-twitter-bootstrap-responsive/"/>
    <updated>2013-05-29T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/29/vertically-and-horizontally-center-with-twitter-bootstrap-responsive</id>
    <content type="html"><![CDATA[<p>I wanted a cross browser / cross device way to vertically and horizontally center my responsive bootstrap elements.</p>

<p>I found a great way to do it.</p>

<!-- more -->


<p>Just add this to your site stylesheet to override / extend bootstrap.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/kSgE6/embedded/css,html/light/"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Namespace Objects Based On Directory Structure and File Names]]></title>
    <link href="http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names/"/>
    <updated>2013-05-24T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names</id>
    <content type="html"><![CDATA[<p>In a <a href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/">previous post</a></p>

<p>I showed how to create a dynamic namespace autoloader with node.js, express, andÂ walk.</p>

<!-- more -->


<p>Please check out this article for information on how to set this up, what node modules to install and where to put this code.</p>

<p>In the http.createServer() function, add this code (or something like it):</p>

<figure class='code'><figcaption><span> (dynamicNamespaceObjectsFilenames.js)</span> <a href='http://html5devgal.com//downloads/code/dynamicNamespaceObjectsFilenames.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s2">&quot; mode.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">emitter</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">str</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">iter</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">startPath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appName</span> <span class="o">=</span> <span class="s2">&quot;poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc/namespace.js&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flags&#39;</span><span class="o">:</span> <span class="s1">&#39;w&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spacedStartPath</span> <span class="o">=</span> <span class="nx">startPath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;window.&quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot; = {} || &quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot;;\r\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">walk</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">startPath</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">upperCaseMe</span> <span class="p">(</span><span class="nx">txt</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">filepath</span> <span class="o">=</span>  <span class="p">[</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">noSlash</span> <span class="o">=</span>  <span class="nx">filepath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">stripStartPath</span> <span class="o">=</span>  <span class="nx">noSlash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">spacedStartPath</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">stripJs</span> <span class="o">=</span>  <span class="nx">stripStartPath</span><span class="p">.</span><span class="nx">replace</span> <span class="p">(</span><span class="s1">&#39;.js&#39;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">stripJs</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\w\S*/g</span><span class="p">,</span> <span class="nx">upperCaseMe</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uppercase</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">pathArr</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">joined</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">joinedStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">pathArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">joined</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">pathArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">joinedStr</span> <span class="o">+=</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">joined</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; = {};\r\n&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">iter</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">joinedStr</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">uniquePaths</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">uniqueEntries</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">end</span> <span class="o">=</span> <span class="s2">&quot;\r\n&quot;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">finalJoinedString</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">str</span> <span class="o">+=</span> <span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">strArray</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">strArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">finalJoinedString</span> <span class="o">+=</span> <span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">end</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">finalJoinedString</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please note this is kind of a mess of arrays so I&rsquo;d be very grateful for any suggestions on how to make this cleaner.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Two New jQuery Plugins and One New Node Module]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module</id>
    <content type="html"><![CDATA[<p>On my quest to plugify and properly modulerize my code I created two new jQuery plugins and one new node nodule.</p>

<p>  <!-- more --></p>

<h1>jQuery plugins</h1>

<p><a href="https://github.com/jewelsjacobs/jquery.prettify">jQuery Prettify</a>
jQuery plugin to print an associative array / object in the browser</p>

<p>UPDATE: The a jQuery UI function <a href="http://api.jqueryui.com/position/">position()</a> centers fine so don&rsquo;t
even bother with the following plugin.</p>

<p>My Simple Center Plugin
<a href="https://github.com/jewelsjacobs/jquery.simpleCenter">jQuery Simple Center Plugin</a>
Simple jQuery plugin to vertically and horizontally center an element within another element.</p>

<h1>Node.js modules</h1>

<p><a href="https://npmjs.org/package/titlecaps">titlecaps Node.js Module</a>
Node module to capitalize first letter in each word</p>

<p>Please bear in mind that they have not been node unit or qunit tested yet, just jhinted as I&rsquo;m on a tight schedule at work. Â 
I&rsquo;ll make it happen very soon!</p>

<p>UPDATE:  I was &lsquo;schooled&rsquo; by the more experienced dev
<a href="http://uk.linkedin.com/in/nelsonic/">Nelson Kenneth Correia</a>
who mentioned these plugins / mod were overkill.
I thought it prudent to mention his response:</p>

<p>  <blockquote><p>@Juila, just had a look at your SimpleCenter Plugin.<br/><br/>Firstly I want to applaud your effort to create a JQuery plugin, <br/>and then advise everyone <em>new</em> to javascript to <em>not</em> do this! <br/>Positioning elements on the page/canvas is done with CSS. <br/><br/>Here is your JS fiddle without <em>any</em> JavaScript: <a href="http://jsfiddle.net/jewelsjacobs/Nuyc9/">http://jsfiddle.net/jewelsjacobs/Nuyc9/</a> <br/><br/>Centering an element in a div is <em>easy</em> in CSS and should be done in a stylesheet unless there&rsquo;s a very good reason to do it <em>dynamically</em> in JS. <br/><br/>Secondly I don&rsquo;t see how your Prettify is better than the original: <a href="https://code.google.com/p/google-code-prettify/wiki/GettingStarted">https://code.google.com/p/google-code-prettify/wiki/GettingStarted</a> <br/><br/>And finally Capitalizing the first letter of each word in a string has been done many times and does not require an entire Node Module&hellip; <br/><br/>It can be done with a <em>single</em> line of JavaScript: <br/><a href="http://jsfiddle.net/jewelsjacobs/Nuyc9/">http://jsfiddle.net/jewelsjacobs/Nuyc9/</a> <br/><br/>Once again, I congratulate your efforts! <br/>Especially the fact that you&rsquo;ve written tests and used Travis.com to confirm the build status of your module! :&ndash;) <br/><br/>But please pick which Modules and Plugins you share here more carefully. <br/>As developers we need to set a good example to others. <br/>Writing an entire <em>module</em> just to capitalize first letters in a string is like using a bomb to build a sand castle! &hellip; #overkill! <br/><br/>And building JQuery plugins when simple CSS will achieve your goal is a good <em>thought</em> exercise, but should <em>never</em> be used in the real world because its a code maintenance nightmare! <br/><br/>The last thing I want is my junior developers copy-pasting this kind of code! <br/><br/>I look forward to reading your <em>next</em> efforts. :&ndash;)</p><footer><strong>Nelson Kenneth Correia</strong></footer></blockquote></p>

<p>His caps code worked perfectly but his CSS code has to be changed depending on the sizes of the elements which is
not exactly what I wanted to do.  The Prettify code he references doesn&rsquo;t really do what I want either.</p>

<p>I made the plugin because I wanted a way to spit out all of the necessary code dynamically without including it in the html file. B
asically , just create a div, give the function and object and viola. From what I can tell of the plugin he refers to just formats text in a pre tag.
You still have to attach the text to the pre tag or generate the pre tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Dynamic Namespace Autoloader With Node.js, Express, and Walk]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps</id>
    <content type="html"><![CDATA[<p>I was tired of manually creating namespace objects for my javascript files so I decided to dynamically generate a namespace.js file
based on the directory structure of my app.</p>

<p>  <!-- more --></p>

<p>Here&rsquo;s how:</p>

<h2>Requirements</h2>

<pre><code>&lt;li&gt;&lt;a title="node.js" href="http://nodejs.org/" target="_blank"&gt;node.js&lt;/a&gt;
</code></pre>

<h3>Node Modules</h3>

<ul>
<li><a href="http://expressjs.com/">express</a></li>
<li><a href="https://github.com/coolaj86/node-walk">walk</a></li>
</ul>


<h2>Instructions</h2>

<p>Download and install a <a href="http://nodejs.org/">node.js binary</a>.</p>

<p>Create a project folder and navigate to it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir app
</span><span class='line'>cd app</span></code></pre></td></tr></table></div></figure>


<p>Install the npm modules. The -S flag will save the dependency info to your package.json file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install express walk -S</span></code></pre></td></tr></table></div></figure>


<p>Set up express in your app. If you don&rsquo;t know how to do this, check out the
<a href="http://expressjs.com/guide.html">express guide</a> or checkout the <strong>Using express(1) to generate an
app</strong> section in the guide to auto generate a node.js / express app.</p>

<p>In your server.js or app.js file (which ever one you&rsquo;ve created for express) do the following:</p>

<p>Make sure you are requiring the nescessary modules. You probably need more but these are just for the code in this example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">walk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;walk&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run the http server in express you probably have something like this in the file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s2">&quot; mode.&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To auto generate the namespace file when the http server starts, modify the http.createServer code block to look like this. Make sure to replace following variables:</p>

<ul>
<li><strong><em>startPath</em></strong> &ndash; path where your app directory resides in relation to the server.js / app.js file.</li>
<li>***appName &ndash; global namespace.</li>
<li><strong><em>filePath</em></strong> &ndash; path of the file you want to write the namespace code to.</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s2">&quot; mode.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">emitter</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">str</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">startPath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appName</span> <span class="o">=</span> <span class="s2">&quot;poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc/namespace.js&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flags&#39;</span><span class="o">:</span> <span class="s1">&#39;w&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spacedStartPath</span> <span class="o">=</span> <span class="nx">startPath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">upperCaseMe</span> <span class="p">(</span><span class="nx">txt</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;window.&quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot; = {} || &quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot;;\r\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">walk</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">startPath</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;directory&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dirpath</span> <span class="o">=</span>  <span class="p">[</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">noSlash</span> <span class="o">=</span>  <span class="nx">dirpath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">strip</span> <span class="o">=</span>  <span class="nx">noSlash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">spacedStartPath</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">strip</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\w\S*/g</span><span class="p">,</span> <span class="nx">upperCaseMe</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">uppercase</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">end</span> <span class="o">=</span> <span class="s2">&quot; = {};\r\n&quot;</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">appName</span> <span class="o">+</span> <span class="nx">uppercase</span> <span class="o">+</span> <span class="nx">end</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this example and this app directory structure</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>poc
</span><span class='line'>--data
</span><span class='line'>----api
</span><span class='line'>----layout
</span><span class='line'>----providers
</span><span class='line'>--grid
</span><span class='line'>--models
</span><span class='line'>----view</span></code></pre></td></tr></table></div></figure>


<p>the autogenerated namespace file looks like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">poc</span> <span class="o">=</span> <span class="p">{}</span> <span class="o">||</span> <span class="nx">poc</span><span class="p">;</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Grid</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Models</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">View</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Api</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Layout</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Providers</span> <span class="o">=</span> <span class="p">{};</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way I can take the following file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>poc/data/providers/names.js</span></code></pre></td></tr></table></div></figure>


<p>and use the following namespace / naming convention code to define a global method / object:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Providers</span><span class="p">.</span><span class="nx">Names</span><span class="p">.</span><span class="nx">globalvar</span> <span class="o">=</span> <span class="s2">&quot;globalvarval&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">Data</span><span class="p">.</span><span class="nx">Providers</span><span class="p">.</span><span class="nx">Names</span><span class="p">.</span><span class="nx">globalmethod</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'><span class="c1">// awesome code here</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I got a twitter response from a one of the great JavaScript masters
<a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> when asking if his
<a href="ttp://www.2ality.com/2011/11/lobrow.html">lobrow library</a> could be used to do this only using browser modules.
I wasn&rsquo;t able to do it and wound up with this solution but he gives some tips:</p>

<p>  <div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> Have you tried browserify? <a href="http://t.co/nQSytJGunc"><a href="http://t.co/nQSytJGunc">http://t.co/nQSytJGunc</a></a>&#10;Best you can do with files in browsers: <a href="http://t.co/gm7Z7kwB0J"><a href="http://t.co/gm7Z7kwB0J">http://t.co/gm7Z7kwB0J</a></a></p>&mdash; Axel Rauschmayer (@rauschma) <a href="https://twitter.com/rauschma/statuses/335016533325647872">May 16, 2013</a></blockquote></p>

<script async src="http://html5devgal.com///platform.twitter.com/widgets.js" charset="utf-8"></script>


<p></div></p>

<p>I hope someone finds this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool Firefox and Chrome Console Functions]]></title>
    <link href="http://html5devgal.com//blog/2013/05/15/cool-firefox-and-chrome-console-functions/"/>
    <updated>2013-05-15T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/15/cool-firefox-and-chrome-console-functions</id>
    <content type="html"><![CDATA[<p>When working with JavaScript, CSS and / or HTML we devs love browser development tools.
It&rsquo;s a little known fact, however that the console in these tools have thier own handy functions.</p>

<p>  <!-- more --></p>

<p>For example, if you want to copy an array or an object in the console, you can type</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">copy</span><span class="p">(</span><span class="nx">someArrayVariableName</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> Â Please note in this example I copied the contents of the clipboard to the console so you can see it.:</p>

<p>  <span class='caption-wrapper'><img class='caption' src='http://html5devgal.com//images/copyfromconsole.png' width='' height='' alt='Copying array in console to clipboard in Chrome' title='Copying array in console to clipboard in Chrome'><span class='caption-text'>Copying array in console to clipboard in Chrome</span></span></p>

<p>There&rsquo;s a whole bunch of other cool console functions as well. Check them out!</p>

<p><a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api">Chrome Command Line API</a>
<a href="http://getfirebug.com/wiki/index.php/Command_Line_API">Firebug Command Line API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absolutely awesome article on plugin development, testing, and CI with grunt]]></title>
    <link href="http://html5devgal.com//blog/2013/05/12/absolutely-awesome-article-on-plugin-development-testing-and-ci-with-grunt/"/>
    <updated>2013-05-12T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/12/absolutely-awesome-article-on-plugin-development-testing-and-ci-with-grunt</id>
    <content type="html"><![CDATA[<p>I had one of those &lsquo;Boy this would make an awesome jquery plugin&rsquo; moments so I decided to roll my own.</p>

<p>  <!-- more --></p>

<p>I also decided I needed to do it right so I could contribute it to the open source community without shame.</p>

<p>I did some some google-ing to find some best practices info and ran into this awesome
<a href="http://markdalgleish.com/2013/01/testing-jquery-plugins-cross-version-with-grunt/">article</a>.</p>

<p>I thought I would pass it along.</p>

<p>Along with some other great
<a href="http://learn.jquery.com/plugins/?rdfrom=http%3A%2F%2Fdocs.jquery.com%2Fmw%2Findex%0A.php%3Ftitle%3DPlugins%2FAuthoring%26redirect%3Dno">articles</a> about jquery plugin best practices I was able to dive right in.</p>

<p><a href="https://github.com/jewelsjacobs/jquery.simpleCenter">Here is</a> what I&rsquo;ve got so far (a work in
progress).</p>

<p>If your new to testing, CI, plugin development or just want to see a good way to design good open source JavaScript apps, I highly recommend reading this stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vanilla JavaScript Menu from JSON]]></title>
    <link href="http://html5devgal.com//blog/2013/05/09/vanilla-javascript-menu-from-json/"/>
    <updated>2013-05-09T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/09/vanilla-javascript-menu-from-json</id>
    <content type="html"><![CDATA[<p>I was asked to create a side nav with submenus using just plain vanilla JavaScript.  Here it is.</p>

<p>  <!-- more --></p>

<p>  <iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8aaqW/embedded/result,js,html,css/light/"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trick to get three.js camera z plane value in browser development tools console]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a tip on how to get the z plane camera position in chrome&rsquo;s console.</p>

<p>  <!-- more --></p>

<p>In this example my render DOM element container has an id of &lsquo;video_container&rsquo;.
Just replace it with yours. Also I&rsquo;m using jquery so you will need to have that included in your app.</p>

<p>I attached this to a global variable (poc is the global namespace of my app) so I can just enter &ldquo;poc.DebugData()&rdquo; in the console.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">poc</span><span class="p">.</span><span class="nx">DebugData</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#video_container&quot;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>             <span class="s2">&quot;window height&quot;</span> <span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;window width&quot;</span> <span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span>
</span><span class='line'>             <span class="s2">&quot;camera z pos&quot;</span> <span class="o">:</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span>
</span><span class='line'>                 <span class="nb">parseInt</span><span class="p">(</span>
</span><span class='line'>                     <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#video_container&quot;</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">eq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">children</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">nodeValue</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;: &#39;</span><span class="p">)[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;) &#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>                         <span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">)[</span><span class="mi">14</span><span class="p">]</span>
</span><span class='line'>                 <span class="p">)</span>
</span><span class='line'>             <span class="p">)</span>
</span><span class='line'>         <span class="p">};</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s probably a cleaner way to do this but this is what I&rsquo;ve got!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript For Samsung SmartTV Browser Detection]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/javascript-for-samsung-smarttv-browser-detection/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/javascript-for-samsung-smarttv-browser-detection</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s the code to determine if the current browser is a SmartTV &ndash; requires
<a href="http://modernizr.com/">Modernizr</a></p>

<p>  <!-- more --></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">isSmartTV</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Modernizr</span><span class="p">.</span><span class="nx">websockets</span> <span class="o">===</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works because the Samsung SmartTV does not support Web Sockets which I find out by running the
<a href="http://modernizr.github.io/Modernizr/test/index.html">Modernizr Test Suite</a> on the SmartTV.</p>

<p>UPDATE: Actually I wound up changing this to use User-Agent sniffing based on a
great <a href="http://lnkd.in/Wtidi7">discussion</a> I had with <a href="www.linkedin.com/in/dmikey">Derek Anderson</a></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="sr">/TV/i</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career Tips for JavaScript Developers]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/career-tips-for-javascript-developers/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/career-tips-for-javascript-developers</id>
    <content type="html"><![CDATA[<p>  <span class='caption-wrapper'><img class='caption' src='http://s3.amazonaws.com/rapgenius/1291131680_two-thumbs-up.jpg' width='' height='' alt='I am very much success in my jobs!' title='I am very much success in my jobs!'><span class='caption-text'>I am very much success in my jobs!</span></span></p>

<p>Here&rsquo;s some tips that will benefit ANY JavaScript developer on their path to success:</p>

<p>  <!-- more --></p>

<ul>
<li>Tip #1 : In a JavaScript interview don&rsquo;t say &lsquo;Vanilla JavaScript? What framework is that?&rsquo;.</li>
<li>Tip #2 : No motivation to learn that new tech? Go on lots of interviews for jobs you can&rsquo;t do.
 Can&rsquo;t forget those wrong answers!</li>
<li>Tip #3 : Don&rsquo;t do phone interviews while going to the bathroom. No matter how nervous you are.
 That goes for Skype too.</li>
</ul>


<p>More to come &ndash; feel free to comment on your own!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[three.js object and camera position tracking in real time]]></title>
    <link href="http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time/"/>
    <updated>2013-04-25T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time</id>
    <content type="html"><![CDATA[<p>In the &ldquo;2D&rdquo; world, you can inspect an element in a browser using the browser&rsquo;s development</p>

<pre><code>tool (Firebug in Firefox, Chrome IE and Safari have their own) and view / tweak the css
in realtime to move the element around.
</code></pre>

<p>In the CSS3D world this is <em>not</em> so easy.</p>

<p>  <!-- more --></p>

<p>The <a href="http://threejs.org/">three.js</a> library
is great in that it allows you to create objects, cameras, lights, etc. and position / animate
them (animating three.js objects can be achieved with <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/libs/tween.min.js">tween.js</a>)
with x, y, and z coordinates.</p>

<h3>3D positioning</h3>

<p>Basically a 3D grid has an <strong><em>x plane</em></strong> (which is horizontal), a <strong><em>y plane</em></strong>
(which is vertical) and a <strong><em>z plane</em></strong> (which is depth)</p>

<p>An object with coordinates x=0, y=0 and z=0 is smack in the <strong><em>middle</em></strong> of this grid
 * A negative coordinate on the x plane will move an element left, positive to the right
 * A negative coordinate on the y plane will move an element down, positive will move it up
 * A negative coordinate on the z plane will move an element back, positive will move it forward</p>

<p>  <span class='caption-wrapper'><img class='caption' src='http://www.chromesphere.com/tutorials/other/Co-ordinates/xyz%20planes_full.png' width='' height='' alt='3D Grid' title='3D Grid'><span class='caption-text'>3D Grid</span></span></p>

<p>three.js has a <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/renderers/CSS3DRenderer.js">CSS3D renderer</a>
which, magically using some very heavy matrix equations, dynamically translates x, y and z
coordinates into a css property called -webkit-transform whose values usually look like this monstrosity:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-webkit-transform:
</span><span class='line'>   translate3d(0px, 0px, 473.7224230277783px)
</span><span class='line'>   matrix3d(
</span><span class='line'>      0.9999499917030334, 0, -0.009999499656260014, 0,
</span><span class='line'>      0, -1, 0, 0,
</span><span class='line'>      0.009999499656260014, 0, 0.9999499917030334, 0,
</span><span class='line'>      0.000002216018401668407, 0, -4987.5380859375, 1
</span><span class='line'>   )
</span><span class='line'>   translate3d(747.5px, 363.5px, 0px);</span></code></pre></td></tr></table></div></figure>


<p>Yick.</p>

<p>For more somewhat understandable info on matrix3d, <a href="http://9elements.com/html5demos/matrix3d/">this</a>
is probably the best documentation out there.</p>

<p>So how are you supposed to figure out the position of a camera in real time after you&rsquo;ve zoomed into your app?</p>

<p>Say you want an event to fire off when the camera is close to a certain object? Or an event to
fire off only if you click on objects located in a certain z-plane coordinate?</p>

<h3>Tracking Objects</h3>

<p>Say you&rsquo;ve got an object element with the following css:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-webkit-transform:
</span><span class='line'> translate3d(-50%, -50%, 0px)
</span><span class='line'> matrix3d(
</span><span class='line'> 1, 0, 0, 0,
</span><span class='line'> 0, -1, 0, 0,
</span><span class='line'> 0, 0, 1, 0,
</span><span class='line'> -800, 800, 3500, 1
</span><span class='line'> );</span></code></pre></td></tr></table></div></figure>


<p>***All you really care about as far as tracking the x, y and z coordinates</p>

<pre><code>        of the object's element is the 13th, 14th and 15th values: -800, 800, 3500.***
</code></pre>

<p><span class='caption-wrapper'><img class='caption' src='http://html5devgal.com//images/att-html5-u-verse-poc.png' width='' height='' alt='Object' title='Object'><span class='caption-text'>Object</span></span></p>

<p>So by viewing these coordinates we know where the object is!</p>

<p>This comes in <strong><em>VERY </em></strong>handy when tracking the camera position during navigation.</p>

<h3>Tracking The Camera</h3>

<p>The camera position can be found in the second child of whatever element is defined as the &lsquo;container&rsquo; of the scene.</p>

<p>In this example this element has an id of &lsquo;video_container&rsquo;.</p>

<p>Here&rsquo;s the JavaScript code to illustrate adding a scene to an element container:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">camera</span><span class="p">,</span> <span class="nx">scene</span><span class="p">,</span> <span class="nx">renderer</span><span class="p">,</span> <span class="nx">controls</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">camera</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">75</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">5000</span><span class="p">);</span>
</span><span class='line'><span class="c1">// camera is center &amp; &#39;front&#39; or screen - camera coordinates are opposite to object coordinates</span>
</span><span class='line'><span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="mi">5000</span><span class="p">;</span> <span class="c1">// lower the number &#39;closer&#39; to objects</span>
</span><span class='line'><span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">25</span><span class="p">;</span> <span class="c1">// lower the number more to the right</span>
</span><span class='line'><span class="nx">camera</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// lower the number the more up</span>
</span><span class='line'><span class="nx">scene</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">();</span>
</span><span class='line'><span class="c1">// CSS3D renderer</span>
</span><span class='line'><span class="nx">renderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CSS3DRenderer</span><span class="p">();</span>
</span><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="p">);</span>
</span><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;video_container&#39;</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">renderer</span><span class="p">.</span><span class="nx">domElement</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the element in the markup, shown in Chrome&rsquo;s Developer Tools:</p>

<p><span class='caption-wrapper'><img class='caption' src='http://html5devgal.com//images/cameraobject.png' width='' height='' alt='Chrome Developer Tools' title='Chrome Developer Tools'><span class='caption-text'>Chrome Developer Tools</span></span></p>

<p>Here&rsquo;s the CSS matrix3D values:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-webkit-transform:
</span><span class='line'>   translate3d(0px, 0px, 445.70307751169236px)
</span><span class='line'>   matrix3d(
</span><span class='line'>      0.9999875426292419, 0, -0.004999937489628792,
</span><span class='line'>      0, 0, -1,
</span><span class='line'>      0, 0, 0.004999937489628792,
</span><span class='line'>      0, 0.9999875426292419, 0,
</span><span class='line'>      0, 0, -5000.0625, 1
</span><span class='line'>   )
</span><span class='line'>   translate3d(747.5px, 342px, 0px);</span></code></pre></td></tr></table></div></figure>


<p>As you can see the camera coordinates in the JavaScript code shows z = 5000,
but in the css z = -5000.0625, a <strong><em>NEGATIVE</em></strong> value.</p>

<p>What gives?</p>

<p>Because the camera is &lsquo;facing&rsquo; <strong><em>toward</em></strong> the grid and the objects in the grid,
the negative and positive values of the x, y, and z coordinates are OPPOSITE of the actual grid and objects.
So the way it works in the three.js library is:
 * +x moves the camera to the LEFT of the grid whereas -z moves the camera to the RIGHT
 * +y moves the camera DOWN in the grid whereas -z moves the camera UP
 * +z moves the camera AWAY from the grid whereas -z moves the camera CLOSER</p>

<p> <strong><em>UPDATE</em></strong>
I just was honored with a tweet from the great Ricardo Cabello Miguel aka <a href="http://www.mrdoob.com/">mr.doob</a>,
creator of three.js, about a better way to get the cameras position in relationship to an object:</p>

<div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> I think you are making things harder than they are&#8230; why not just camera.position.distanceTo( object.position )?</p>&mdash; Mr.d Í¡Â° ÍÊ Í¡Â°b (@mrdoob) <a href="https://twitter.com/mrdoob/statuses/327555248531050497">April 25, 2013</a></blockquote>
<script async src="http://html5devgal.com///platform.twitter.com/widgets.js" charset="utf-8"></script></div>


<p>Unfortunately, I can&rsquo;t really use this for realtime results during navigation
because my camera and object position code is in global variables in a different
files order to make things more modular.
Setting breakpoints in the browser or
entering it in the console isn&rsquo;t quote working for me. To just get the camera z-plane
value in the browser console check out
  <a href="http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/">this post</a></p>

<p><strong><em>AN IMPORTANT NOTE ABOUT TRACKBALL / TOUCH CONTROLS AND THE CAMERA Z POSITION:</em></strong>
To facilitate scroll wheel, trackball and touch zoom controls, a three.js utility
library
called <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js">Trackball Controls</a>
can be used.
Make sure all of your objects have <strong><em>POSITIVE</em></strong> z coordinate values.
If they don&rsquo;t the camera will never reach them as it can only zoom up to
z coordinate = 0. Once the camera has z = 0 you will keep pinching / scrolling forever and go no where.</p>
]]></content>
  </entry>
  
</feed>
