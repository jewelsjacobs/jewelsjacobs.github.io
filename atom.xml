<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[HTML5 Dev Gal]]></title>
  <link href="http://html5devgal.com//atom.xml" rel="self"/>
  <link href="http://html5devgal.com//"/>
  <updated>2013-06-12T16:31:46-05:00</updated>
  <id>http://html5devgal.com//</id>
  <author>
    <name><![CDATA[Julia Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finally Got JSdocs Working With My Node App]]></title>
    <link href="http://html5devgal.com//blog/2013/06/10/finally-got-jsdocs-working-with-node-app/"/>
    <updated>2013-06-10T14:40:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/10/finally-got-jsdocs-working-with-node-app</id>
    <content type="html"><![CDATA[<p>Man was that a pain in the butt!
Read on for my adventures in javascript API documentation.</p>

<p><!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#jsdoc">JSDoc</a></li>
  <li><a href="#docco">Docco</a></li>
  <li><a href="#dox">Dox</a></li>
  <li><a href="#my-solution">My Solution</a>    <ul>
      <li><a href="#node-jsdoc-toolkit-module">Node JSDoc Toolkit Module</a>        <ul>
          <li><a href="#configuration">Configuration</a></li>
          <li><a href="#automate-with-shell-script">Automate With Shell Script</a></li>
          <li><a href="#grunt-ify-shell-script">Grunt-ify Shell Script</a>            <ul>
              <li><a href="#gruntfilejs-configuration">Gruntfile.js Configuration</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#windows">Windows</a></li>
</ul>

<h2 id="jsdoc">JSDoc</h2>
<p>I wanted to create API documentation for my app so I took a look at <a href="http://usejsdoc.org/about-getting-started.html">jsdoc</a>.</p>

<h2 id="docco">Docco</h2>
<p>For some reason which I don’t remember, I wound up getting sidetracked with <a href="http://jashkenas.github.io/docco/">docco</a>
but by the time I got there I had already created jsdoc formatted dockblocks which don’t play well with docco.</p>

<h2 id="dox">Dox</h2>
<p>So I read about <a href="https://github.com/visionmedia/dox">dox</a> which is supposed to allow you to use
jsdoc formatted dockblocks to generate docco type documentation.
Being a huge fan of grunt automation I figured I’d use the <a href="https://github.com/punkave/grunt-dox">grunt-dox plugin</a></p>

<p>That was a total <a href="http://stackoverflow.com/questions/17003930/grunt-dox-generating-html-file-with-only-title">cluster</a> so I gave up.</p>

<h2 id="my-solution">My Solution</h2>
<p>I finaly crawled back to jsdoc and came up with this psuedo automated solution.</p>

<h3 id="node-jsdoc-toolkit-module">Node JSDoc Toolkit Module</h3>
<p>I installed <a href="https://github.com/p120ph37/node-jsdoc-toolkit">node-jsdoc-toolkit</a>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
npm install jsdoc-toolkit --save-dev
</pre></div>
</div>
 </figure></notextile></div>

<h4 id="configuration">Configuration</h4>
<p>Then I created a config file and put it in the jsdoc-toolkit node module conf directory, ie:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
$APP_DIR/node_modules/jsdoc-toolkit/conf/thisconffile.conf
</pre></div>
</div>
 </figure></notextile></div>

<p>Here’s an example of what my configuration file, which I named looks jsdoc.conf,
looks like:</p>

<div><script src="https://gist.github.com/5751795.js"></script>
<noscript><pre><code /></pre></noscript></div>

<h4 id="automate-with-shell-script">Automate With Shell Script</h4>
<p>Then to automate running the jsdoc command with the conf file I created a super simple shell script.
<strong>Please note its referring to my configuration file named <code>jsdoc.conf</code>. Replace that with the name of
your configuration file.</strong></p>

<div><script src="https://gist.github.com/5751839.js"></script>
<noscript><pre><code /></pre></noscript></div>

<p>I placed this shell script in my application directory.</p>

<h4 id="grunt-ify-shell-script">Grunt-ify Shell Script</h4>
<p>Then to grunt-ify this shell script I installed <a href="https://github.com/sindresorhus/grunt-shell">grunt-shell</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
npm install grunt-shell --save-dev
</pre></div>
</div>
 </figure></notextile></div>

<h5 id="gruntfilejs-configuration">Gruntfile.js Configuration</h5>
<p>If your not used to using grunt or configuring grunt tasks, you might want to check out
<a href="https://github.com/gruntjs/grunt/wiki/Getting-started">the Grunt Getting Started guide</a>.</p>

<p>For information on the specific grunt-shell options,
take a look at the <a href="https://github.com/sindresorhus/grunt-shell/blob/master/readme.md">documentation</a>.</p>

<p>For my purposes I set up the Gruntfile.js grunt-shell options like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
shell: {
  docs : {
    command: './docs.sh'
  }
}
</pre></div>
</div>
 </figure></notextile></div>

<p>I added the <code>shell</code> task to my grunt <code>test</code> task so when I run</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
grunt test
</pre></div>
</div>
 </figure></notextile></div>

<p>in the console my documentation gets created.</p>

<h2 id="windows">Windows</h2>

<p>I have a co-worker running a Windows 7 PC who I wanted to be able to update docs.  I couldn’t
figure out how to do this using the node js-toolkit module or grunt-shell.</p>

<p>I had to dowload the <a href="https://code.google.com/p/jsdoc-toolkit/downloads/list">jsdoc-toolkit source</a>
and create a batch file.</p>

<p>Here’s the batch file I created:</p>

<div><script src="https://gist.github.com/5758434.js"></script>
<noscript><pre><code /></pre></noscript></div>

<p>To run this you need to:</p>

<ul>
  <li>Have JRE.  If you don’t have it, download it <a href="http://www.java.com/en/">here</a></li>
  <li>Be able to run <code>java</code> command in a command prompt.  For this you’ll need to:
    <ul>
      <li>Set your <code>JAVA_HOME</code> environment variable (I’ve got <code>.;C:\Program Files (x86)\Java\jre7</code> as the value)</li>
      <li>Add <code>;%JAVA_HOME%\bin</code> to the PATH environment variable.
 More details on this can be found <a href="http://www.robertsindall.co.uk/blog/setting-java-home-variable-in-windows/">here</a></li>
    </ul>
  </li>
</ul>

<p>As usual I’m sure there’s a much better way to do this but this is what worked for me
after hours of pain.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress TOC and coderay Codeblocks]]></title>
    <link href="http://html5devgal.com//blog/2013/06/08/octopress-toc-and-coderay-codeblocks/"/>
    <updated>2013-06-08T10:19:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/08/octopress-toc-and-coderay-codeblocks</id>
    <content type="html"><![CDATA[<p>I had some problems implementing this but got some great help and was able to overcome the issues.</p>

<p><!-- more -->
Turns out I was creating the TOC wrong.  Check out this <a href="http://stackoverflow.com/questions/16967670/octopress-kramdown-generate-error-for-tags-with">stackoverflow.com question</a> for details</p>

<p>If your having TOC issues, you can take a look at my <a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/source/resources/index.markdown">markdown source</a> for guidance.</p>

<p>Also got the coderay stuff working following <a href="http://blog.codebykat.com/2013/05/23/gorgeous-octopress-codeblocks-with-coderay/">this excellent article</a>.</p>

<p>I wound up wrapping code lines by changing her</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
.CodeRay pre
</pre></div>
</div>
 </figure></notextile></div>

<p>block in</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
sass/custom/_styles.scss
</pre></div>
</div>
 </figure></notextile></div>

<p>to:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
<span class="class">.CodeRay</span> <span class="type">pre</span> {
  <span class="key">background</span>: <span class="value">none</span>;
  <span class="key">color</span>: <span class="color">#000</span>;
  <span class="comment">/* added */</span>
  <span class="key">overflow</span>: <span class="value">auto</span>;
  <span class="key">white-space</span>: <span class="value">pre</span>;
  <span class="key">word-wrap</span>: <span class="value">break-word</span>;
  <span class="key">word-break</span>: <span class="value">normal</span>;
}
</pre></div>
</div>
 </figure></notextile></div>

<p>If you get stuck on any of this feel free to take a peek at my source code that I
had to change to make this work.  Please note I also installed her <a href="https://github.com/codebykat/blog/blob/2f6c9615c02869dca5f52921ac5eb7e0b35a6427/plugins/code_ray_block.rb">awesome coderay Octopress plugin</a>.</p>

<ul>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/sass/custom/_coderay.scss">sass/custom/_coderay.scss</a></li>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/sass/custom/_styles.scss">sass/custom/_styles.scss</a></li>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/sass/partials/_syntax.scss">sass/partials/_syntax.scss</a></li>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/_config.yml">_config.yml</a></li>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/source/resources/index.markdown">sample markdown toc</a></li>
  <li><a href="https://raw.github.com/jewelsjacobs/jewelsjacobs.github.io/source/source/_posts/2013-05-01-trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console.markdown">sample markdown coderay</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic JavaScript Linting Fixes]]></title>
    <link href="http://html5devgal.com//blog/2013/06/05/automatic-javascript-linting-fixes/"/>
    <updated>2013-06-05T20:14:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/05/automatic-javascript-linting-fixes</id>
    <content type="html"><![CDATA[<p>I was getting sick of manually fixing <a href="https://developers.google.com/closure/utilities/">closure linter</a> errors one
by one so I created a shell script to do this recursivley over a directory or with a single file.</p>

<p><!-- more --></p>

<p>Requires <a href="https://developers.google.com/closure/compiler/">closure compiler</a></p>

<div><script src="https://gist.github.com/5718645.js"></script>
<noscript><pre><code /></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertically and Horizontally Center With Twitter Bootstrap (Responsive)]]></title>
    <link href="http://html5devgal.com//blog/2013/05/29/vertically-and-horizontally-center-with-twitter-bootstrap-responsive/"/>
    <updated>2013-05-29T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/29/vertically-and-horizontally-center-with-twitter-bootstrap-responsive</id>
    <content type="html"><![CDATA[<p>I wanted a cross browser / cross device way to vertically and horizontally center my responsive bootstrap elements.</p>

<p>I found a great way to do it.</p>

<!-- more -->

<p>Just add this to your site stylesheet to override / extend bootstrap.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/kSgE6/embedded/css,html/light/"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Namespace Objects Based On Directory Structure and File Names]]></title>
    <link href="http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names/"/>
    <updated>2013-05-24T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names</id>
    <content type="html"><![CDATA[<p>In a <a href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/">previous post</a></p>

<p>I showed how to create a dynamic namespace autoloader with node.js, express, and walk.</p>

<!-- more -->
<p>Please check out this article for information on how to set this up, what node modules to install and where to put this code.</p>

<p>In the http.createServer() function, add this code (or something like it):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (dynamicNamespaceObjectsFilenames.js)</span> <a href="http://html5devgal.com//downloads/code/dynamicNamespaceObjectsFilenames.js">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class="line">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s2">&quot; mode.&quot;</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">emitter</span><span class="p">,</span>
</span><span class="line">        <span class="nx">str</span><span class="p">,</span>
</span><span class="line">        <span class="nx">iter</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class="line">        <span class="nx">startPath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">appName</span> <span class="o">=</span> <span class="s2">&quot;poc&quot;</span><span class="p">,</span>
</span><span class="line">        <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc/namespace.js&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flags&#39;</span><span class="o">:</span> <span class="s1">&#39;w&#39;</span><span class="p">});</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">spacedStartPath</span> <span class="o">=</span> <span class="nx">startPath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class="line">    <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;window.&quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot; = {} || &quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot;;\r\n&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">walk</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">startPath</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">function</span> <span class="nx">upperCaseMe</span> <span class="p">(</span><span class="nx">txt</span><span class="p">){</span>
</span><span class="line">        <span class="k">return</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">filepath</span> <span class="o">=</span>  <span class="p">[</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">noSlash</span> <span class="o">=</span>  <span class="nx">filepath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">stripStartPath</span> <span class="o">=</span>  <span class="nx">noSlash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">spacedStartPath</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">stripJs</span> <span class="o">=</span>  <span class="nx">stripStartPath</span><span class="p">.</span><span class="nx">replace</span> <span class="p">(</span><span class="s1">&#39;.js&#39;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">stripJs</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\w\S*/g</span><span class="p">,</span> <span class="nx">upperCaseMe</span><span class="p">);</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">uppercase</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="p">};</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">pathArr</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">joined</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">            <span class="kd">var</span> <span class="nx">joinedStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class="line">            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">pathArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">joined</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">pathArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class="line">                <span class="nx">joinedStr</span> <span class="o">+=</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">joined</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; = {};\r\n&quot;</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">
</span><span class="line">            <span class="nx">iter</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">joinedStr</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="nx">next</span><span class="p">();</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line">    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">uniquePaths</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">uniqueEntries</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">end</span> <span class="o">=</span> <span class="s2">&quot;\r\n&quot;</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">finalJoinedString</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class="line">                <span class="nx">str</span> <span class="o">+=</span> <span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">var</span> <span class="nx">strArray</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">end</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">strArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">                <span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class="line">                <span class="nx">finalJoinedString</span> <span class="o">+=</span> <span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">end</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="nx">log</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">finalJoinedString</span><span class="p">);</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line">
</span><span class="line"><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Please note this is kind of a mess of arrays so I’d be very grateful for any suggestions on how to make this cleaner.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Two New jQuery Plugins and One New Node Module]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module</id>
    <content type="html"><![CDATA[<p>On my quest to plugify and properly modulerize my code I created two new jQuery plugins and one new node nodule.</p>

<p><!-- more --></p>

<h1 id="jquery-plugins">jQuery plugins</h1>
<p><a href="https://github.com/jewelsjacobs/jquery.prettify">jQuery Prettify</a>
jQuery plugin to print an associative array / object in the browser</p>

<p>UPDATE: The a jQuery UI function <a href="http://api.jqueryui.com/position/">position()</a> centers fine so don’t
even bother with the following plugin.</p>

<p>My Simple Center Plugin
<a href="https://github.com/jewelsjacobs/jquery.simpleCenter">jQuery Simple Center Plugin</a>
Simple jQuery plugin to vertically and horizontally center an element within another element.
#Node.js modules
<a href="https://npmjs.org/package/titlecaps">titlecaps Node.js Module</a>
Node module to capitalize first letter in each word</p>

<p>Please bear in mind that they have not been node unit or qunit tested yet, just jhinted as I’m on a tight schedule at work.  
I’ll make it happen very soon!</p>

<p>UPDATE:  I was ‘schooled’ by the more experienced dev
<a href="http://uk.linkedin.com/in/nelsonic/">Nelson Kenneth Correia</a>
who mentioned these plugins / mod were overkill.
I thought it prudent to mention his response:</p>

<blockquote><p>@Juila, just had a look at your SimpleCenter Plugin.
<br />
<br />Firstly I want to applaud your effort to create a JQuery plugin, 
<br />and then advise everyone *new* to javascript to *not* do this! 
<br />Positioning elements on the page/canvas is done with CSS. 
<br />
<br />Here is your JS fiddle without *any* JavaScript: http://jsfiddle.net/jewelsjacobs/Nuyc9/ 
<br />
<br />Centering an element in a div is *easy* in CSS and should be done in a stylesheet unless there&#8217;s a very good reason to do it *dynamically* in JS. 
<br />
<br />Secondly I don&#8217;t see how your Prettify is better than the original: https://code.google.com/p/google-code-prettify/wiki/GettingStarted 
<br />
<br />And finally Capitalizing the first letter of each word in a string has been done many times and does not require an entire Node Module&#8230; 
<br />
<br />It can be done with a *single* line of JavaScript: 
<br />http://jsfiddle.net/jewelsjacobs/Nuyc9/ 
<br />
<br />Once again, I congratulate your efforts! 
<br />Especially the fact that you&#8217;ve written tests and used Travis.com to confirm the build status of your module! :-) 
<br />
<br />But please pick which Modules and Plugins you share here more carefully. 
<br />As developers we need to set a good example to others. 
<br />Writing an entire *module* just to capitalize first letters in a string is like using a bomb to build a sand castle! &#8230; #overkill! 
<br />
<br />And building JQuery plugins when simple CSS will achieve your goal is a good *thought* exercise, but should *never* be used in the real world because its a code maintenance nightmare! 
<br />
<br />The last thing I want is my junior developers copy-pasting this kind of code! 
<br />
<br />I look forward to reading your *next* efforts. :-)</p><footer><strong>Nelson Kenneth Correia</strong></footer></blockquote>

<p>His caps code worked perfectly but his CSS code has to be changed depending on the sizes of the elements which is
not exactly what I wanted to do.  The Prettify code he references doesn’t really do what I want either.</p>

<p>I made the plugin because I wanted a way to spit out all of the necessary code dynamically without including it in the html file. B
asically , just create a div, give the function and object and viola. From what I can tell of the plugin he refers to just formats text in a pre tag.
You still have to attach the text to the pre tag or generate the pre tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Dynamic Namespace Autoloader With Node.js, Express, and Walk]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps</id>
    <content type="html"><![CDATA[<p>I was tired of manually creating namespace objects for my javascript files so I decided to dynamically generate a namespace.js file
based on the directory structure of my app.</p>

<p><!-- more --></p>

<p>Here’s how:
##Requirements</p>

<pre><code>&lt;li&gt;&lt;a title="node.js" href="http://nodejs.org/" target="_blank"&gt;node.js&lt;/a&gt;
</code></pre>

<h3 id="node-modules">Node Modules</h3>

<ul>
  <li><a href="http://expressjs.com/">express</a></li>
  <li><a href="https://github.com/coolaj86/node-walk">walk</a></li>
</ul>

<h2 id="instructions">Instructions</h2>
<p>Download and install a <a href="http://nodejs.org/">node.js binary</a>.</p>

<p>Create a project folder and navigate to it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
mkdir app
cd app
</pre></div>
</div>
 </figure></notextile></div>

<p>Install the npm modules. The -S flag will save the dependency info to your package.json file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>npm install express walk -S</pre></div>
</div>
 </figure></notextile></div>

<p>Set up express in your app. If you don’t know how to do this, check out the
<a href="http://expressjs.com/guide.html">express guide</a> or checkout the <strong>Using express(1) to generate an
app</strong> section in the guide to auto generate a node.js / express app.</p>

<p>In your server.js or app.js file (which ever one you’ve created for express) do the following:</p>

<p>Make sure you are requiring the nescessary modules. You probably need more but these are just for the code in this example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Modules Required </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> express = require(<span class="string"><span class="delimiter">'</span><span class="content">express</span><span class="delimiter">'</span></span>),
    http = require(<span class="string"><span class="delimiter">'</span><span class="content">http</span><span class="delimiter">'</span></span>),
    fs = require(<span class="string"><span class="delimiter">'</span><span class="content">fs</span><span class="delimiter">'</span></span>),
    walk = require(<span class="string"><span class="delimiter">'</span><span class="content">walk</span><span class="delimiter">'</span></span>);
</pre></div>
</div>
 </figure></notextile></div>

<p>To run the http server in express you probably have something like this in the file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>http.createServer function </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="string"><span class="delimiter">'</span><span class="content">port</span><span class="delimiter">'</span></span>), <span class="keyword">function</span>(){
    console.log(<span class="string"><span class="delimiter">&quot;</span><span class="content">Express server listening on port </span><span class="delimiter">&quot;</span></span> + app.get(<span class="string"><span class="delimiter">'</span><span class="content">port</span><span class="delimiter">'</span></span>) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> in </span><span class="delimiter">&quot;</span></span> + process.env.NODE_ENV + <span class="string"><span class="delimiter">&quot;</span><span class="content"> mode.</span><span class="delimiter">&quot;</span></span>);
});
</pre></div>
</div>
 </figure></notextile></div>

<p>To auto generate the namespace file when the http server starts, modify the http.createServer code block to look like this. Make sure to replace following variables:</p>

<ul>
  <li><strong><em>startPath</em></strong> - path where your app directory resides in relation to the server.js / app.js file.</li>
  <li>***appName - global namespace.</li>
  <li><strong><em>filePath</em></strong> - path of the file you want to write the namespace code to.</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Code to Add </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="string"><span class="delimiter">'</span><span class="content">port</span><span class="delimiter">'</span></span>), <span class="keyword">function</span>(){
    console.log(<span class="string"><span class="delimiter">&quot;</span><span class="content">Express server listening on port </span><span class="delimiter">&quot;</span></span> + app.get(<span class="string"><span class="delimiter">'</span><span class="content">port</span><span class="delimiter">'</span></span>) + <span class="string"><span class="delimiter">&quot;</span><span class="content"> in </span><span class="delimiter">&quot;</span></span> + process.env.NODE_ENV + <span class="string"><span class="delimiter">&quot;</span><span class="content"> mode.</span><span class="delimiter">&quot;</span></span>);

    <span class="keyword">var</span> emitter,
        str,
        startPath = <span class="string"><span class="delimiter">&quot;</span><span class="content">public/javascripts/poc</span><span class="delimiter">&quot;</span></span>,
        appName = <span class="string"><span class="delimiter">&quot;</span><span class="content">poc</span><span class="delimiter">&quot;</span></span>,
        filePath = <span class="string"><span class="delimiter">&quot;</span><span class="content">public/javascripts/poc/namespace.js</span><span class="delimiter">&quot;</span></span>;

    <span class="keyword">var</span> log = fs.createWriteStream(filePath, {<span class="key"><span class="delimiter">'</span><span class="content">flags</span><span class="delimiter">'</span></span>: <span class="string"><span class="delimiter">'</span><span class="content">w</span><span class="delimiter">'</span></span>});
    <span class="keyword">var</span> spacedStartPath = startPath.replace(<span class="regexp"><span class="delimiter">/</span><span class="content">\/</span><span class="delimiter">/</span><span class="modifier">g</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content"> </span><span class="delimiter">&quot;</span></span>);

    <span class="keyword">function</span> <span class="function">upperCaseMe</span> (txt){
        <span class="keyword">return</span> txt.charAt(<span class="integer">0</span>).toUpperCase() + txt.substr(<span class="integer">1</span>).toLowerCase();
    }

    str = <span class="string"><span class="delimiter">&quot;</span><span class="content">window.</span><span class="delimiter">&quot;</span></span> + appName + <span class="string"><span class="delimiter">&quot;</span><span class="content"> = {} || </span><span class="delimiter">&quot;</span></span> + appName + <span class="string"><span class="delimiter">&quot;</span><span class="content">;</span><span class="char">\r</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>;
    emitter = walk.walk(startPath);

    emitter.on(<span class="string"><span class="delimiter">'</span><span class="content">directory</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> (path, stat, next) {
        <span class="keyword">var</span> dirpath =  [path, <span class="string"><span class="delimiter">'</span><span class="content">/</span><span class="delimiter">'</span></span>, stat.name].join(<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>);

        <span class="keyword">var</span> noSlash =  dirpath.replace(<span class="regexp"><span class="delimiter">/</span><span class="content">\/</span><span class="delimiter">/</span><span class="modifier">g</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content"> </span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">var</span> strip =  noSlash.replace(spacedStartPath,<span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>);
        <span class="keyword">var</span> uppercase = strip.replace(<span class="regexp"><span class="delimiter">/</span><span class="char">\w</span><span class="char">\S</span><span class="content">*</span><span class="delimiter">/</span><span class="modifier">g</span></span>, upperCaseMe);
        <span class="keyword">if</span> (uppercase.indexOf(<span class="string"><span class="delimiter">&quot;</span><span class="content"> </span><span class="delimiter">&quot;</span></span>) != -<span class="integer">1</span>) {
            uppercase = uppercase.replace(<span class="regexp"><span class="delimiter">/</span><span class="content"> </span><span class="delimiter">/</span><span class="modifier">g</span></span>,<span class="string"><span class="delimiter">&quot;</span><span class="content">.</span><span class="delimiter">&quot;</span></span>);
        };
        <span class="keyword">var</span> end = <span class="string"><span class="delimiter">&quot;</span><span class="content"> = {};</span><span class="char">\r</span><span class="char">\n</span><span class="delimiter">&quot;</span></span>
        str += appName + uppercase + end;

        next();
    });

    emitter.on(<span class="string"><span class="delimiter">'</span><span class="content">end</span><span class="delimiter">'</span></span>, <span class="keyword">function</span> () {
        log.write(str);
    });

});
</pre></div>
</div>
 </figure></notextile></div>

<p>With this example and this app directory structure</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
poc
--data
----api
----layout
----providers
--grid
--models
----view
</pre></div>
</div>
 </figure></notextile></div>

<p>the autogenerated namespace file looks like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>namespace.js </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
window.poc = {} || poc;
poc.Data = {};
poc.Grid = {};
poc.Models = {};
poc.Models.View = {};
poc.Data.Api = {};
poc.Data.Layout = {};
poc.Data.Providers = {};
</pre></div>
</div>
 </figure></notextile></div>

<p>This way I can take the following file:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>
poc/data/providers/names.js
</pre></div>
</div>
 </figure></notextile></div>

<p>and use the following namespace / naming convention code to define a global method / object:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Example Method </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
poc.Data.Providers.Names.globalvar = <span class="string"><span class="delimiter">&quot;</span><span class="content">globalvarval</span><span class="delimiter">&quot;</span></span>;
poc.Data.Providers.Names.<span class="function">globalmethod</span> = <span class="keyword">function</span>(){
<span class="comment">// awesome code here</span>
};
</pre></div>
</div>
 </figure></notextile></div>

<p>I got a twitter response from a one of the great JavaScript masters
<a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> when asking if his
<a href="ttp://www.2ality.com/2011/11/lobrow.html">lobrow library</a> could be used to do this only using browser modules.
I wasn’t able to do it and wound up with this solution but he gives some tips:</p>

<div class="embed tweet"><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> Have you tried browserify? <a href="http://t.co/nQSytJGunc">http://t.co/nQSytJGunc</a>&#10;Best you can do with files in browsers: <a href="http://t.co/gm7Z7kwB0J">http://t.co/gm7Z7kwB0J</a></p>&mdash; Axel Rauschmayer (@rauschma) <a href="https://twitter.com/rauschma/statuses/335016533325647872">May 16, 2013</a></blockquote>
<script async="" src="http://html5devgal.com///platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>I hope someone finds this helpful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cool Firefox and Chrome Console Functions]]></title>
    <link href="http://html5devgal.com//blog/2013/05/15/cool-firefox-and-chrome-console-functions/"/>
    <updated>2013-05-15T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/15/cool-firefox-and-chrome-console-functions</id>
    <content type="html"><![CDATA[<p>When working with JavaScript, CSS and / or HTML we devs love browser development tools.
It’s a little known fact, however that the console in these tools have thier own handy functions.</p>

<p><!-- more --></p>

<p>For example, if you want to copy an array or an object in the console, you can type</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="CodeRay">
  <div class="code"><pre>copy(someArrayVariableName)</pre></div>
</div>
 </figure></notextile></div>

<p> Please note in this example I copied the contents of the clipboard to the console so you can see it.:</p>

<p><span class="caption-wrapper"><img class="caption" src="http://html5devgal.com//images/copyfromconsole.png" width="" height="" alt="Copying array in console to clipboard in Chrome" title="Copying array in console to clipboard in Chrome" /><span class="caption-text">Copying array in console to clipboard in Chrome</span></span></p>

<p>There’s a whole bunch of other cool console functions as well. Check them out!</p>

<p><a href="https://developers.google.com/chrome-developer-tools/docs/commandline-api">Chrome Command Line API</a></p>

<p><a href="http://getfirebug.com/wiki/index.php/Command_Line_API">Firebug Command Line API</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Absolutely awesome article on plugin development, testing, and CI with grunt]]></title>
    <link href="http://html5devgal.com//blog/2013/05/12/absolutely-awesome-article-on-plugin-development-testing-and-ci-with-grunt/"/>
    <updated>2013-05-12T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/12/absolutely-awesome-article-on-plugin-development-testing-and-ci-with-grunt</id>
    <content type="html"><![CDATA[<p>I had one of those ‘Boy this would make an awesome jquery plugin’ moments so I decided to roll my own.</p>

<p><!-- more --></p>

<p>I also decided I needed to do it right so I could contribute it to the open source community without shame. </p>

<p>I did some some google-ing to find some best practices info and ran into this awesome
<a href="http://markdalgleish.com/2013/01/testing-jquery-plugins-cross-version-with-grunt/">article</a>.</p>

<p>I thought I would pass it along.</p>

<p>Along with some other great
<a href="http://learn.jquery.com/plugins/?rdfrom=http%3A%2F%2Fdocs.jquery.com%2Fmw%2Findex
.php%3Ftitle%3DPlugins%2FAuthoring%26redirect%3Dno">articles</a> about jquery plugin best practices I was able to dive right in.</p>

<p><a href="https://github.com/jewelsjacobs/jquery.simpleCenter">Here is</a> what I’ve got so far (a work in
progress).</p>

<p>If your new to testing, CI, plugin development or just want to see a good way to design good open source JavaScript apps, I highly recommend reading this stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vanilla JavaScript Menu from JSON]]></title>
    <link href="http://html5devgal.com//blog/2013/05/09/vanilla-javascript-menu-from-json/"/>
    <updated>2013-05-09T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/09/vanilla-javascript-menu-from-json</id>
    <content type="html"><![CDATA[<p>I was asked to create a side nav with submenus using just plain vanilla JavaScript.  Here it is.</p>

<p><!-- more --></p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/8aaqW/embedded/result,js,html,css/light/"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trick to get three.js camera z plane value in browser development tools console]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console</id>
    <content type="html"><![CDATA[<p>Here’s a tip on how to get the z plane camera position in chrome’s console.</p>

<p><!-- more --></p>

<p>In this example my render DOM element container has an id of ‘video_container’.
Just replace it with yours. Also I’m using jquery so you will need to have that included in your app.</p>

<p>I attached this to a global variable (poc is the global namespace of my app) so I can just enter “poc.DebugData()” in the console.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Debug Code </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
poc.<span class="function">DebugData</span> = <span class="keyword">function</span> () {
     <span class="keyword">if</span> (<span class="predefined">$</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">#video_container</span><span class="delimiter">&quot;</span></span>).length &gt; <span class="integer">0</span>) {
         <span class="keyword">return</span> {
             <span class="key"><span class="delimiter">&quot;</span><span class="content">window height</span><span class="delimiter">&quot;</span></span> : window.innerHeight,
             <span class="key"><span class="delimiter">&quot;</span><span class="content">window width</span><span class="delimiter">&quot;</span></span> : window.innerWidth,
             <span class="key"><span class="delimiter">&quot;</span><span class="content">camera z pos</span><span class="delimiter">&quot;</span></span> : Math.abs(
                 parseInt(
                     <span class="predefined">$</span>(<span class="string"><span class="delimiter">&quot;</span><span class="content">#video_container</span><span class="delimiter">&quot;</span></span>)
                         .children(<span class="string"><span class="delimiter">&quot;</span><span class="content">div</span><span class="delimiter">&quot;</span></span>)
                         .eq(<span class="integer">0</span>)
                         .children()[<span class="integer">0</span>]
                         .attributes.style.nodeValue
                         .split(<span class="string"><span class="delimiter">'</span><span class="content">: </span><span class="delimiter">'</span></span>)[<span class="integer">4</span>]
                         .split(<span class="string"><span class="delimiter">'</span><span class="content">) </span><span class="delimiter">'</span></span>)[<span class="integer">1</span>]
                         .split(<span class="string"><span class="delimiter">'</span><span class="content">, </span><span class="delimiter">'</span></span>)[<span class="integer">14</span>]
                 )
             )
         };
     }
 };
</pre></div>
</div>
 </figure></notextile></div>

<p>There’s probably a cleaner way to do this but this is what I’ve got!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript For Samsung SmartTV Browser Detection]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/javascript-for-samsung-smarttv-browser-detection/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/javascript-for-samsung-smarttv-browser-detection</id>
    <content type="html"><![CDATA[<p><strong>UPDATE</strong>
This is better achieved with a Modernizr plugin called <a href="https://github.com/barisaydinoglu/Detectizr">Detectizr</a>.
Use that instead.  I’ll keep the rest of this info for reference.</p>

<p>Here’s the code to determine if the current browser is a SmartTV - requires
<a href="http://modernizr.com/">Modernizr</a></p>

<p><!-- more --></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Using Modernizr </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">function</span> <span class="function">isSmartTV</span>() {
    <span class="keyword">return</span> Modernizr.websockets === <span class="predefined-constant">false</span>;
}
</pre></div>
</div>
 </figure></notextile></div>

<p>This works because the Samsung SmartTV does not support Web Sockets which I find out by running the
<a href="http://modernizr.github.io/Modernizr/test/index.html">Modernizr Test Suite</a> on the SmartTV.</p>

<p>UPDATE: Actually I wound up changing this to use User-Agent sniffing based on a
great <a href="http://lnkd.in/Wtidi7">discussion</a> I had with <a href="www.linkedin.com/in/dmikey">Derek Anderson</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>User-Agent Sniffing </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">function</span> () {
    <span class="keyword">return</span> navigator.userAgent.search(<span class="regexp"><span class="delimiter">/</span><span class="content">TV</span><span class="delimiter">/</span><span class="modifier">i</span></span>) &gt;= <span class="integer">0</span>;
}
</pre></div>
</div>
 </figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Career Tips for JavaScript Developers]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/career-tips-for-javascript-developers/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/career-tips-for-javascript-developers</id>
    <content type="html"><![CDATA[<p><span class="caption-wrapper"><img class="caption" src="http://s3.amazonaws.com/rapgenius/1291131680_two-thumbs-up.jpg" width="" height="" alt="I am very much success in my jobs!" title="I am very much success in my jobs!" /><span class="caption-text">I am very much success in my jobs!</span></span></p>

<p>Here’s some tips that will benefit ANY JavaScript developer on their path to success:</p>

<p><!-- more --></p>

<ul>
  <li>Tip #1 : In a JavaScript interview don’t say ‘Vanilla JavaScript? What framework is that?’.</li>
  <li>Tip #2 : No motivation to learn that new tech? Go on lots of interviews for jobs you can’t do.
 Can’t forget those wrong answers!</li>
  <li>Tip #3 : Don’t do phone interviews while going to the bathroom. No matter how nervous you are.
 That goes for Skype too.</li>
</ul>

<p>More to come - feel free to comment on your own!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[three.js object and camera position tracking in real time]]></title>
    <link href="http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time/"/>
    <updated>2013-04-25T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time</id>
    <content type="html"><![CDATA[<p>In the “2D” world, you can inspect an element in a browser using the browser’s development
    tool (Firebug in Firefox, Chrome IE and Safari have their own) and view / tweak the css
    in realtime to move the element around.
In the CSS3D world this is <em>not</em> so easy.</p>

<p><!-- more --></p>

<p>The <a href="http://threejs.org/">three.js</a> library
is great in that it allows you to create objects, cameras, lights, etc. and position / animate
them (animating three.js objects can be achieved with <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/libs/tween.min.js">tween.js</a>)
with x, y, and z coordinates.</p>

<h3 id="d-positioning">3D positioning</h3>
<p>Basically a 3D grid has an <strong><em>x plane</em></strong> (which is horizontal), a <strong><em>y plane</em></strong>
(which is vertical) and a <strong><em>z plane</em></strong> (which is depth)</p>

<p>An object with coordinates x=0, y=0 and z=0 is smack in the <strong><em>middle</em></strong> of this grid
 * A negative coordinate on the x plane will move an element left, positive to the right
 * A negative coordinate on the y plane will move an element down, positive will move it up
 * A negative coordinate on the z plane will move an element back, positive will move it forward</p>

<p><span class="caption-wrapper"><img class="caption" src="http://www.chromesphere.com/tutorials/other/Co-ordinates/xyz%20planes_full.png" width="" height="" alt="3D Grid" title="3D Grid" /><span class="caption-text">3D Grid</span></span></p>

<p>three.js has a <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/renderers/CSS3DRenderer.js">CSS3D renderer</a>
which, magically using some very heavy matrix equations, dynamically translates x, y and z
coordinates into a css property called -webkit-transform whose values usually look like this monstrosity:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Crazy transforms </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">473.7224230277783px</span>)
   <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
      <span class="float">0</span><span class="class">.9999499917030334</span>, <span class="float">0</span>, <span class="float">-0</span><span class="class">.009999499656260014</span>, <span class="float">0</span>,
      <span class="float">0</span>, <span class="float">-1</span>, <span class="float">0</span>, <span class="float">0</span>,
      <span class="float">0</span><span class="class">.009999499656260014</span>, <span class="float">0</span>, <span class="float">0</span><span class="class">.9999499917030334</span>, <span class="float">0</span>,
      <span class="float">0</span><span class="class">.000002216018401668407</span>, <span class="float">0</span>, <span class="float">-4987</span><span class="class">.5380859375</span>, <span class="float">1</span>
   )
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">747.5px</span>, <span class="float">363.5px</span>, <span class="float">0px</span>);
</pre></div>
</div>
 </figure></notextile></div>

<p>Yick.</p>

<p>For more somewhat understandable info on matrix3d, <a href="http://9elements.com/html5demos/matrix3d/">this</a>
is probably the best documentation out there.</p>

<p>So how are you supposed to figure out the position of a camera in real time after you’ve zoomed into your app?</p>

<p>Say you want an event to fire off when the camera is close to a certain object? Or an event to
fire off only if you click on objects located in a certain z-plane coordinate?.</p>

<h3 id="tracking-objects">Tracking Objects</h3>
<p>Say you’ve got an object element with the following css:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Tranform Example </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
 <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">-50%</span>, <span class="float">-50%</span>, <span class="float">0px</span>)
 <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
 <span class="float">1</span>, <span class="float">0</span>, <span class="float">0</span>, <span class="float">0</span>,
 <span class="float">0</span>, <span class="float">-1</span>, <span class="float">0</span>, <span class="float">0</span>,
 <span class="float">0</span>, <span class="float">0</span>, <span class="float">1</span>, <span class="float">0</span>,
 <span class="float">-800</span>, <span class="float">800</span>, <span class="float">3500</span>, <span class="float">1</span>
 );
</pre></div>
</div>
 </figure></notextile></div>

<p><strong><em>All you really care about as far as tracking the x, y and z coordinates
            of the object’s element is the 13th, 14th and 15th values: -800, 800, 3500.</em></strong></p>

<p><span class="caption-wrapper"><img class="caption" src="http://html5devgal.com//images/att-html5-u-verse-poc.png" width="" height="" alt="Object" title="Object" /><span class="caption-text">Object</span></span></p>

<p>So by viewing these coordinates we know where the object is!</p>

<p>This comes in <em>**VERY **</em>handy when tracking the camera position during navigation.</p>

<h3 id="tracking-the-camera">Tracking The Camera</h3>
<p>The camera position can be found in the second child of whatever element is defined as the ‘container’ of the scene.</p>

<p>In this example this element has an id of ‘video_container’.</p>

<p>Here’s the JavaScript code to illustrate adding a scene to an element container:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>Scene to Element Container </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> camera, scene, renderer, controls;

camera = <span class="keyword">new</span> THREE.PerspectiveCamera(<span class="integer">75</span>, window.innerWidth / window.innerHeight, <span class="float">0.1</span>, <span class="integer">5000</span>);
<span class="comment">// camera is center &amp; 'front' or screen - camera coordinates are opposite to object coordinates</span>
camera.position.z = <span class="integer">5000</span>; <span class="comment">// lower the number 'closer' to objects</span>
camera.position.x = -<span class="integer">25</span>; <span class="comment">// lower the number more to the right</span>
camera.position.y = <span class="integer">0</span>; <span class="comment">// lower the number the more up</span>
scene = <span class="keyword">new</span> THREE.Scene();
<span class="comment">// CSS3D renderer</span>
renderer = <span class="keyword">new</span> THREE.CSS3DRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.domElement.style.position = <span class="string"><span class="delimiter">'</span><span class="content">absolute</span><span class="delimiter">'</span></span>;

document.getElementById(<span class="string"><span class="delimiter">'</span><span class="content">video_container</span><span class="delimiter">'</span></span>).appendChild(renderer.domElement);
</pre></div>
</div>
 </figure></notextile></div>

<p>Here’s the element in the markup, shown in Chrome’s Developer Tools:</p>

<p><span class="caption-wrapper"><img class="caption" src="http://html5devgal.com//images/cameraobject.png" width="" height="" alt="Chrome Developer Tools" title="Chrome Developer Tools" /><span class="caption-text">Chrome Developer Tools</span></span></p>

<p>Here’s the CSS matrix3D values:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption class="code-header" style="margin-bottom:-5px;"><span>3D Transforms Example </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">445.70307751169236px</span>)
   <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
      <span class="float">0</span><span class="class">.9999875426292419</span>, <span class="float">0</span>, <span class="float">-0</span><span class="class">.004999937489628792</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">-1</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">0</span><span class="class">.004999937489628792</span>,
      <span class="float">0</span>, <span class="float">0</span><span class="class">.9999875426292419</span>, <span class="float">0</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">-5000</span><span class="class">.0625</span>, <span class="float">1</span>
   )
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">747.5px</span>, <span class="float">342px</span>, <span class="float">0px</span>);
</pre></div>
</div>
 </figure></notextile></div>

<p>As you can see the camera coordinates in the JavaScript code shows z = 5000,
but in the css z = -5000.0625, a <strong><em>NEGATIVE</em></strong> value.</p>

<p>What gives?</p>

<p>Because the camera is ‘facing’ <strong><em>toward</em></strong> the grid and the objects in the grid,
the negative and positive values of the x, y, and z coordinates are OPPOSITE of the actual grid and objects.
So the way it works in the three.js library is:
 * +x moves the camera to the LEFT of the grid whereas -z moves the camera to the RIGHT
 * +y moves the camera DOWN in the grid whereas -z moves the camera UP
 * +z moves the camera AWAY from the grid whereas -z moves the camera CLOSER</p>

<p><strong><em>UPDATE</em></strong>
I just was honored with a tweet from the great Ricardo Cabello Miguel aka <a href="http://www.mrdoob.com/">mr.doob</a>,
creator of three.js, about a better way to get the cameras position in relationship to an object:</p>

<div class="embed tweet"><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> I think you are making things harder than they are&#8230; why not just camera.position.distanceTo( object.position )?</p>&mdash; Mr.d ͡° ͜ʖ ͡°b (@mrdoob) <a href="https://twitter.com/mrdoob/statuses/327555248531050497">April 25, 2013</a></blockquote>
<script async="" src="http://html5devgal.com///platform.twitter.com/widgets.js" charset="utf-8"></script></div>

<p>Unfortunately, I can’t really use this for realtime results during navigation
because my camera and object position code is in global variables in a different
files order to make things more modular.
Setting breakpoints in the browser or
entering it in the console isn’t quote working for me. To just get the camera z-plane
value in the browser console check out
  <a href="http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/">this post</a></p>

<p><strong><em>AN IMPORTANT NOTE ABOUT TRACKBALL / TOUCH CONTROLS AND THE CAMERA Z POSITION:</em></strong>
To facilitate scroll wheel, trackball and touch zoom controls, a three.js utility
library
called <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js">Trackball Controls</a>
can be used.
Make sure all of your objects have <strong><em>POSITIVE</em></strong> z coordinate values.
If they don’t the camera will never reach them as it can only zoom up to
z coordinate = 0. Once the camera has z = 0 you will keep pinching / scrolling forever and go no where.</p>
]]></content>
  </entry>
  
</feed>
