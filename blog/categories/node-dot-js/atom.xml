<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | HTML5 Dev Gal]]></title>
  <link href="http://html5devgal.com//blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://html5devgal.com//"/>
  <updated>2013-06-10T15:27:41-05:00</updated>
  <id>http://html5devgal.com//</id>
  <author>
    <name><![CDATA[Julia Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Finally Got JSdocs Working With My Node App]]></title>
    <link href="http://html5devgal.com//blog/2013/06/10/finally-got-jsdocs-working-with-node-app/"/>
    <updated>2013-06-10T14:40:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/06/10/finally-got-jsdocs-working-with-node-app</id>
    <content type="html"><![CDATA[<p>Man was that a pain in the butt!
Read on for my adventures in javascript API documentation.</p>

<p><!-- more --></p>

<ul id="markdown-toc">
  <li><a href="#jsdoc">JSDoc</a></li>
  <li><a href="#docco">Docco</a></li>
  <li><a href="#dox">Dox</a></li>
  <li><a href="#my-solution">My Solution</a>    <ul>
      <li><a href="#node-jsdoc-toolkit-module">Node JSDoc Toolkit Module</a>        <ul>
          <li><a href="#configuration">Configuration</a></li>
          <li><a href="#automate-with-shell-script">Automate With Shell Script</a></li>
          <li><a href="#grunt-ify-shell-script">Grunt-ify Shell Script</a>            <ul>
              <li><a href="#gruntfilejs-configuration">Gruntfile.js Configuration</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="jsdoc">JSDoc</h2>
<p>I wanted to create API documentation for my app so I took a look at <a href="http://usejsdoc.org/about-getting-started.html">jsdoc</a>.</p>

<h2 id="docco">Docco</h2>
<p>For some reason which I don’t remember, I wound up getting sidetracked with <a href="http://jashkenas.github.io/docco/">docco</a>
but by the time I got there I had already created jsdoc formatted dockblocks which don’t play well with docco.</p>

<h2 id="dox">Dox</h2>
<p>So I read about <a href="https://github.com/visionmedia/dox">dox</a> which is supposed to allow you to use
jsdoc formatted dockblocks to generate docco type documentation.
Being a huge fan of grunt automation I figured I’d use the <a href="https://github.com/punkave/grunt-dox">grunt-dox plugin</a></p>

<p>That was a total <a href="http://stackoverflow.com/questions/17003930/grunt-dox-generating-html-file-with-only-title">cluster</a> so I gave up.</p>

<h2 id="my-solution">My Solution</h2>
<p>I finaly crawled back to jsdoc and came up with this psuedo automated solution.</p>

<h3 id="node-jsdoc-toolkit-module">Node JSDoc Toolkit Module</h3>
<p>I installed <a href="https://github.com/p120ph37/node-jsdoc-toolkit">node-jsdoc-toolkit</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
npm install jsdoc-toolkit –save-dev
</pre></div>
</div>
 </figure></notextile></div></p>

<h4 id="configuration">Configuration</h4>
<p>Then I created a config file and put it in the jsdoc-toolkit node module conf directory, ie:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
$APP_DIR/node_modules/jsdoc-toolkit/conf/thisconffile.conf
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Here’s an example of what my configuration file, which I named looks jsdoc.conf,
looks like:</p>

<p><div><script src='https://gist.github.com/5751795.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<h4 id="automate-with-shell-script">Automate With Shell Script</h4>
<p>Then to automate running the jsdoc command with the conf file I created a super simple shell script.
<strong>Please note its referring to my configuration file named <code>jsdoc.conf</code>. Replace that with the name of
your configuration file.</strong></p>

<p><div><script src='https://gist.github.com/5751839.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>I placed this shell script in my application directory.</p>

<h4 id="grunt-ify-shell-script">Grunt-ify Shell Script</h4>
<p>Then to grunt-ify this shell script I installed <a href="https://github.com/sindresorhus/grunt-shell">grunt-shell</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
npm install grunt-shell –save-dev
</pre></div>
</div>
 </figure></notextile></div></p>

<h5 id="gruntfilejs-configuration">Gruntfile.js Configuration</h5>
<p>If your not used to using grunt or configuring grunt tasks, you might want to check out
<a href="https://github.com/gruntjs/grunt/wiki/Getting-started">the Grunt Getting Started guide</a>.</p>

<p>For information on the specific grunt-shell options,
take a look at the <a href="https://github.com/sindresorhus/grunt-shell/blob/master/readme.md">documentation</a>.</p>

<p>For my purposes I set up the Gruntfile.js grunt-shell options like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
shell: {
  docs : {
    command: ‘./docs.sh’
  }
}
</pre></div>
</div>
 </figure></notextile></div></p>

<p>I added the <code>shell</code> task to my grunt <code>test</code> task so when I run</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
grunt test
</pre></div>
</div>
 </figure></notextile></div></p>

<p>in the console my documentation gets created.</p>

<p>As usual I’m sure there’s a much better way to do this but this is what worked for me
after hours of pain.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Namespace Objects Based On Directory Structure and File Names]]></title>
    <link href="http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names/"/>
    <updated>2013-05-24T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/24/dynamic-namespace-objects-based-on-directory-structure-and-file-names</id>
    <content type="html"><![CDATA[<p>In a <a href="/blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/">previous post</a></p>

<p>I showed how to create a dynamic namespace autoloader with node.js, express, and walk.</p>

<!-- more -->
<p>Please check out this article for information on how to set this up, what node modules to install and where to put this code.</p>

<p>In the http.createServer() function, add this code (or something like it):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (dynamicNamespaceObjectsFilenames.js)</span> <a href='/downloads/code/dynamicNamespaceObjectsFilenames.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">).</span><span class="nx">listen</span><span class="p">(</span><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">),</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Express server listening on port &quot;</span> <span class="o">+</span> <span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;port&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">+</span> <span class="s2">&quot; mode.&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">emitter</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">str</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">iter</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">startPath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">appName</span> <span class="o">=</span> <span class="s2">&quot;poc&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">filePath</span> <span class="o">=</span> <span class="s2">&quot;public/javascripts/poc/namespace.js&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">createWriteStream</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;flags&#39;</span><span class="o">:</span> <span class="s1">&#39;w&#39;</span><span class="p">});</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">spacedStartPath</span> <span class="o">=</span> <span class="nx">startPath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;window.&quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot; = {} || &quot;</span> <span class="o">+</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s2">&quot;;\r\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">emitter</span> <span class="o">=</span> <span class="nx">walk</span><span class="p">.</span><span class="nx">walk</span><span class="p">(</span><span class="nx">startPath</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">upperCaseMe</span> <span class="p">(</span><span class="nx">txt</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">txt</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;file&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">stat</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">filepath</span> <span class="o">=</span>  <span class="p">[</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">noSlash</span> <span class="o">=</span>  <span class="nx">filepath</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\//g</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">stripStartPath</span> <span class="o">=</span>  <span class="nx">noSlash</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">spacedStartPath</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">stripJs</span> <span class="o">=</span>  <span class="nx">stripStartPath</span><span class="p">.</span><span class="nx">replace</span> <span class="p">(</span><span class="s1">&#39;.js&#39;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">stripJs</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\w\S*/g</span><span class="p">,</span> <span class="nx">upperCaseMe</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uppercase</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uppercase</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">pathArr</span> <span class="o">=</span> <span class="nx">uppercase</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">joined</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">joinedStr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">pathArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">joined</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">pathArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">joinedStr</span> <span class="o">+=</span> <span class="nx">appName</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="nx">joined</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; = {};\r\n&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">iter</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">joinedStr</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">next</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">emitter</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;end&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">uniquePaths</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">uniqueEntries</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">end</span> <span class="o">=</span> <span class="s2">&quot;\r\n&quot;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">finalJoinedString</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">iter</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uniquePaths</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">str</span> <span class="o">+=</span> <span class="nx">iter</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">strArray</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="nx">end</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">strArray</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">uniqueEntries</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="nx">finalJoinedString</span> <span class="o">+=</span> <span class="nx">strArray</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="nx">end</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">log</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">finalJoinedString</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Please note this is kind of a mess of arrays so I’d be very grateful for any suggestions on how to make this cleaner.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Two New jQuery Plugins and One New Node Module]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/my-two-new-jquery-plugins-and-one-new-node-module</id>
    <content type="html"><![CDATA[<p>On my quest to plugify and properly modulerize my code I created two new jQuery plugins and one new node nodule.</p>

<p><!-- more --></p>

<h1 id="jquery-plugins">jQuery plugins</h1>
<p><a href="https://github.com/jewelsjacobs/jquery.prettify">jQuery Prettify</a>
jQuery plugin to print an associative array / object in the browser</p>

<p>UPDATE: The a jQuery UI function <a href="http://api.jqueryui.com/position/">position()</a> centers fine so don’t
even bother with the following plugin.</p>

<p>My Simple Center Plugin
<a href="https://github.com/jewelsjacobs/jquery.simpleCenter">jQuery Simple Center Plugin</a>
Simple jQuery plugin to vertically and horizontally center an element within another element.
#Node.js modules
<a href="https://npmjs.org/package/titlecaps">titlecaps Node.js Module</a>
Node module to capitalize first letter in each word</p>

<p>Please bear in mind that they have not been node unit or qunit tested yet, just jhinted as I’m on a tight schedule at work.  
I’ll make it happen very soon!</p>

<p>UPDATE:  I was ‘schooled’ by the more experienced dev
<a href="http://uk.linkedin.com/in/nelsonic/">Nelson Kenneth Correia</a>
who mentioned these plugins / mod were overkill.
I thought it prudent to mention his response:</p>

<p><blockquote><p></p></p><p><p>@Juila, just had a look at your SimpleCenter Plugin.</p></p><p><p>Firstly I want to applaud your effort to create a JQuery plugin, <br/>and then advise everyone <em>new</em> to javascript to <em>not</em> do this! <br/>Positioning elements on the page/canvas is done with CSS. </p></p><p><p>Here is your JS fiddle without <em>any</em> JavaScript: http://jsfiddle.net/jewelsjacobs/Nuyc9/ </p></p><p><p>Centering an element in a div is <em>easy</em> in CSS and should be done in a stylesheet unless there’s a very good reason to do it <em>dynamically</em> in JS. </p></p><p><p>Secondly I don’t see how your Prettify is better than the original: https://code.google.com/p/google-code-prettify/wiki/GettingStarted </p></p><p><p>And finally Capitalizing the first letter of each word in a string has been done many times and does not require an entire Node Module… </p></p><p><p>It can be done with a <em>single</em> line of JavaScript: <br/>http://jsfiddle.net/jewelsjacobs/Nuyc9/ </p></p><p><p>Once again, I congratulate your efforts! <br/>Especially the fact that you’ve written tests and used Travis.com to confirm the build status of your module! :-) </p></p><p><p>But please pick which Modules and Plugins you share here more carefully. <br/>As developers we need to set a good example to others. <br/>Writing an entire <em>module</em> just to capitalize first letters in a string is like using a bomb to build a sand castle! … #overkill! </p></p><p><p>And building JQuery plugins when simple CSS will achieve your goal is a good <em>thought</em> exercise, but should <em>never</em> be used in the real world because its a code maintenance nightmare! </p></p><p><p>The last thing I want is my junior developers copy-pasting this kind of code! </p></p><p><p>I look forward to reading your <em>next</em> efforts. :-)</p><footer><strong>Nelson Kenneth Correia</strong></footer></blockquote></p>

<p>His caps code worked perfectly but his CSS code has to be changed depending on the sizes of the elements which is
not exactly what I wanted to do.  The Prettify code he references doesn’t really do what I want either.</p>

<p>I made the plugin because I wanted a way to spit out all of the necessary code dynamically without including it in the html file. B
asically , just create a div, give the function and object and viola. From what I can tell of the plugin he refers to just formats text in a pre tag.
You still have to attach the text to the pre tag or generate the pre tag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create Dynamic Namespace Autoloader With Node.js, Express, and Walk]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps</id>
    <content type="html"><![CDATA[<p>I was tired of manually creating namespace objects for my javascript files so I decided to dynamically generate a namespace.js file
based on the directory structure of my app.</p>

<p><!-- more --></p>

<p>Here’s how:
##Requirements</p>

<pre><code>&lt;li&gt;&lt;a title="node.js" href="http://nodejs.org/" target="_blank"&gt;node.js&lt;/a&gt;
</code></pre>

<h3 id="node-modules">Node Modules</h3>

<ul>
  <li><a href="http://expressjs.com/">express</a></li>
  <li><a href="https://github.com/coolaj86/node-walk">walk</a></li>
</ul>

<h2 id="instructions">Instructions</h2>
<p>Download and install a <a href="http://nodejs.org/">node.js binary</a>.</p>

<p>Create a project folder and navigate to it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
mkdir app
cd app
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Install the npm modules. The -S flag will save the dependency info to your package.json file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>npm install express walk -S</pre></div>
</div>
 </figure></notextile></div></p>

<p>Set up express in your app. If you don’t know how to do this, check out the
<a href="http://expressjs.com/guide.html">express guide</a> or checkout the <strong>Using express(1) to generate an
app</strong> section in the guide to auto generate a node.js / express app.</p>

<p>In your server.js or app.js file (which ever one you’ve created for express) do the following:</p>

<p>Make sure you are requiring the nescessary modules. You probably need more but these are just for the code in this example:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Modules Required </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> express = require(<span class="error">‘</span>express<span class="error">’</span>),
    http = require(<span class="error">‘</span>http<span class="error">’</span>),
    fs = require(<span class="error">‘</span>fs<span class="error">’</span>),
    walk = require(<span class="error">‘</span>walk<span class="error">’</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>To run the http server in express you probably have something like this in the file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>http.createServer function </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="error">‘</span>port<span class="error">’</span>), <span class="keyword">function</span>(){
    console.log(<span class="error">“</span>Express server listening on port <span class="error">“</span> + app.get(<span class="error">‘</span>port<span class="error">’</span>) + <span class="error">“</span> <span class="keyword">in</span> <span class="error">“</span> + process.env.NODE_ENV + <span class="error">“</span> mode.<span class="error">”</span>);
});
</pre></div>
</div>
 </figure></notextile></div></p>

<p>To auto generate the namespace file when the http server starts, modify the http.createServer code block to look like this. Make sure to replace following variables:</p>

<ul>
  <li><strong><em>startPath</em></strong> - path where your app directory resides in relation to the server.js / app.js file.</li>
  <li>***appName - global namespace.</li>
  <li><strong><em>filePath</em></strong> - path of the file you want to write the namespace code to.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Code to Add </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="error">‘</span>port<span class="error">’</span>), <span class="keyword">function</span>(){
    console.log(<span class="error">“</span>Express server listening on port <span class="error">“</span> + app.get(<span class="error">‘</span>port<span class="error">’</span>) + <span class="error">“</span> <span class="keyword">in</span> <span class="error">“</span> + process.env.NODE_ENV + <span class="error">“</span> mode.<span class="error">”</span>);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;pre&gt;&lt;code&gt;var emitter,
    str,
    startPath = &quot;public</span><span class="delimiter">/</span></span>javascripts/poc<span class="string"><span class="delimiter">&quot;</span><span class="content">,
    appName = </span><span class="delimiter">&quot;</span></span>poc<span class="string"><span class="delimiter">&quot;</span><span class="content">,
    filePath = </span><span class="delimiter">&quot;</span></span><span class="reserved">public</span>/javascripts/poc/namespace.js<span class="string"><span class="delimiter">&quot;</span><span class="content">;

var log = fs.createWriteStream(filePath, {'flags': 'w'});
var spacedStartPath = startPath.replace(/</span><span class="content">\/</span><span class="content">/g, </span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">);

function upperCaseMe (txt){
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
}

str = </span><span class="delimiter">&quot;</span></span>window.<span class="string"><span class="delimiter">&quot;</span><span class="content"> + appName + </span><span class="delimiter">&quot;</span></span> = {} || <span class="string"><span class="delimiter">&quot;</span><span class="content"> + appName + </span><span class="delimiter">&quot;</span></span>;<span class="error">\</span>r<span class="error">\</span>n<span class="string"><span class="delimiter">&quot;</span><span class="content">;
emitter = walk.walk(startPath);

emitter.on('directory', function (path, stat, next) {
    var dirpath =  [path, '/', stat.name].join('');

    var noSlash =  dirpath.replace(/</span><span class="content">\/</span><span class="content">/g, </span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">);
    var strip =  noSlash.replace(spacedStartPath,</span><span class="delimiter">&quot;</span></span><span class="string"><span class="delimiter">&quot;</span><span class="content">);
    var uppercase = strip.replace(/</span><span class="content">\w</span><span class="content">\S</span><span class="content">*/g, upperCaseMe);
    if (uppercase.indexOf(</span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">) != -1) {
        uppercase = uppercase.replace(/ /g,</span><span class="delimiter">&quot;</span></span>.<span class="string"><span class="delimiter">&quot;</span><span class="content">);
    };
    var end = </span><span class="delimiter">&quot;</span></span> = {};<span class="error">\</span>r<span class="error">\</span>n<span class="string"><span class="delimiter">&quot;</span><span class="content">
    str += appName + uppercase + end;

    next();
});

emitter.on('end', function () {
    log.write(str);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;});
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>With this example and this app directory structure</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
poc
–data
—-api
—-layout
—-providers
–grid
–models
—-view
</pre></div>
</div>
 </figure></notextile></div>
the autogenerated namespace file looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>namespace.js </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
window.poc = {} || poc;
poc.Data = {};
poc.Grid = {};
poc.Models = {};
poc.Models.View = {};
poc.Data.Api = {};
poc.Data.Layout = {};
poc.Data.Providers = {};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>This way I can take the following file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
poc/data/providers/names.js
</pre></div>
</div>
 </figure></notextile></div></p>

<p>and use the following namespace / naming convention code to define a global method / object:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example Method </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
poc.Data.Providers.Names.globalvar = <span class="error">“</span>globalvarval<span class="error">”</span>;
poc.Data.Providers.Names.<span class="function">globalmethod</span> = <span class="keyword">function</span>(){
<span class="comment">// awesome code here</span>
};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>I got a twitter response from a one of the great JavaScript masters
<a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> when asking if his
<a href="ttp://www.2ality.com/2011/11/lobrow.html">lobrow library</a> could be used to do this only using browser modules.
I wasn’t able to do it and wound up with this solution but he gives some tips:</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> Have you tried browserify? <a href="http://t.co/nQSytJGunc">http://t.co/nQSytJGunc</a>&#10;Best you can do with files in browsers: <a href="http://t.co/gm7Z7kwB0J">http://t.co/gm7Z7kwB0J</a></p>&mdash; Axel Rauschmayer (@rauschma) <a href="https://twitter.com/rauschma/statuses/335016533325647872">May 16, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>I hope someone finds this helpful!</p>
]]></content>
  </entry>
  
</feed>
