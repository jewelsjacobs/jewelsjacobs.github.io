<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: express | HTML5 Dev Gal]]></title>
  <link href="http://html5devgal.com//blog/categories/express/atom.xml" rel="self"/>
  <link href="http://html5devgal.com//"/>
  <updated>2013-06-13T16:29:21-05:00</updated>
  <id>http://html5devgal.com//</id>
  <author>
    <name><![CDATA[Julia Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create Dynamic Namespace Autoloader With Node.js, Express, and Walk]]></title>
    <link href="http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps/"/>
    <updated>2013-05-16T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/16/create-dynamic-namespace-autoloader-with-node-js-express-walk-and-titlecaps</id>
    <content type="html"><![CDATA[<p>I was tired of manually creating namespace objects for my javascript files so I decided to dynamically generate a namespace.js file
based on the directory structure of my app.</p>

<p><!-- more --></p>

<h2 id="requirements">Requirements</h2>

<ul>
  <li><a href="http://nodejs.org/">node.js</a></li>
</ul>

<h3 id="node-modules">Node Modules</h3>

<ul>
  <li><a href="http://expressjs.com/">express</a></li>
  <li><a href="https://github.com/coolaj86/node-walk">walk</a></li>
</ul>

<h2 id="instructions">Instructions</h2>
<p>Download and install a <a href="http://nodejs.org/">node.js binary</a>.</p>

<p>Create a project folder and navigate to it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
mkdir app
cd app
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Install the npm modules. The -S flag will save the dependency info to your package.json file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>npm install express walk -S</pre></div>
</div>
 </figure></notextile></div></p>

<p>Set up express in your app. If you don’t know how to do this, check out the
<a href="http://expressjs.com/guide.html">express guide</a> or checkout the <strong>Using express(1) to generate an
app</strong> section in the guide to auto generate a node.js / express app.</p>

<p>In your server.js or app.js file (which ever one you’ve created for express) do the following:</p>

<p>Make sure you are requiring the nescessary modules. You probably need more but these are just for the code in this example:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Modules Required </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> express = require(<span class="error">‘</span>express<span class="error">’</span>),
    http = require(<span class="error">‘</span>http<span class="error">’</span>),
    fs = require(<span class="error">‘</span>fs<span class="error">’</span>),
    walk = require(<span class="error">‘</span>walk<span class="error">’</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>To run the http server in express you probably have something like this in the file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>http.createServer function </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="error">‘</span>port<span class="error">’</span>), <span class="keyword">function</span>(){
    console.log(<span class="error">“</span>Express server listening on port <span class="error">“</span> + app.get(<span class="error">‘</span>port<span class="error">’</span>) + <span class="error">“</span> <span class="keyword">in</span> <span class="error">“</span> + process.env.NODE_ENV + <span class="error">“</span> mode.<span class="error">”</span>);
});
</pre></div>
</div>
 </figure></notextile></div></p>

<p>To auto generate the namespace file when the http server starts, modify the http.createServer code block to look like this. Make sure to replace following variables:</p>

<ul>
  <li><strong><em>startPath</em></strong> - path where your app directory resides in relation to the server.js / app.js file.</li>
  <li><strong><em>appName</em></strong> - global namespace.</li>
  <li><strong><em>filePath</em></strong> - path of the file you want to write the namespace code to.</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Code to Add </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
http.createServer(app).listen(app.get(<span class="error">‘</span>port<span class="error">’</span>), <span class="keyword">function</span>(){
    console.log(<span class="error">“</span>Express server listening on port <span class="error">“</span> + app.get(<span class="error">‘</span>port<span class="error">’</span>) + <span class="error">“</span> <span class="keyword">in</span> <span class="error">“</span> + process.env.NODE_ENV + <span class="error">“</span> mode.<span class="error">”</span>);&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;pre&gt;&lt;code&gt;var emitter,
    str,
    startPath = &quot;public</span><span class="delimiter">/</span></span>javascripts/poc<span class="string"><span class="delimiter">&quot;</span><span class="content">,
    appName = </span><span class="delimiter">&quot;</span></span>poc<span class="string"><span class="delimiter">&quot;</span><span class="content">,
    filePath = </span><span class="delimiter">&quot;</span></span><span class="reserved">public</span>/javascripts/poc/namespace.js<span class="string"><span class="delimiter">&quot;</span><span class="content">;

var log = fs.createWriteStream(filePath, {'flags': 'w'});
var spacedStartPath = startPath.replace(/</span><span class="content">\/</span><span class="content">/g, </span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">);

function upperCaseMe (txt){
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
}

str = </span><span class="delimiter">&quot;</span></span>window.<span class="string"><span class="delimiter">&quot;</span><span class="content"> + appName + </span><span class="delimiter">&quot;</span></span> = {} || <span class="string"><span class="delimiter">&quot;</span><span class="content"> + appName + </span><span class="delimiter">&quot;</span></span>;<span class="error">\</span>r<span class="error">\</span>n<span class="string"><span class="delimiter">&quot;</span><span class="content">;
emitter = walk.walk(startPath);

emitter.on('directory', function (path, stat, next) {
    var dirpath =  [path, '/', stat.name].join('');

    var noSlash =  dirpath.replace(/</span><span class="content">\/</span><span class="content">/g, </span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">);
    var strip =  noSlash.replace(spacedStartPath,</span><span class="delimiter">&quot;</span></span><span class="string"><span class="delimiter">&quot;</span><span class="content">);
    var uppercase = strip.replace(/</span><span class="content">\w</span><span class="content">\S</span><span class="content">*/g, upperCaseMe);
    if (uppercase.indexOf(</span><span class="delimiter">&quot;</span></span> <span class="string"><span class="delimiter">&quot;</span><span class="content">) != -1) {
        uppercase = uppercase.replace(/ /g,</span><span class="delimiter">&quot;</span></span>.<span class="string"><span class="delimiter">&quot;</span><span class="content">);
    };
    var end = </span><span class="delimiter">&quot;</span></span> = {};<span class="error">\</span>r<span class="error">\</span>n<span class="string"><span class="delimiter">&quot;</span><span class="content">
    str += appName + uppercase + end;

    next();
});

emitter.on('end', function () {
    log.write(str);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;});
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>With this example and this app directory structure</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
poc
–data
—-api
—-layout
—-providers
–grid
–models
—-view
</pre></div>
</div>
 </figure></notextile></div>
the autogenerated namespace file looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>namespace.js </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
window.poc = {} || poc;
poc.Data = {};
poc.Grid = {};
poc.Models = {};
poc.Models.View = {};
poc.Data.Api = {};
poc.Data.Layout = {};
poc.Data.Providers = {};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>This way I can take the following file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="CodeRay">
  <div class="code"><pre>
poc/data/providers/names.js
</pre></div>
</div>
 </figure></notextile></div></p>

<p>and use the following namespace / naming convention code to define a global method / object:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Example Method </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
poc.Data.Providers.Names.globalvar = <span class="error">“</span>globalvarval<span class="error">”</span>;
poc.Data.Providers.Names.<span class="function">globalmethod</span> = <span class="keyword">function</span>(){
<span class="comment">// awesome code here</span>
};
</pre></div>
</div>
 </figure></notextile></div></p>

<p>I got a twitter response from a one of the great JavaScript masters
<a href="http://www.2ality.com/">Dr. Axel Rauschmayer</a> when asking if his
<a href="ttp://www.2ality.com/2011/11/lobrow.html">lobrow library</a> could be used to do this only using browser modules.
I wasn’t able to do it and wound up with this solution but he gives some tips:</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> Have you tried browserify? <a href="http://t.co/nQSytJGunc">http://t.co/nQSytJGunc</a>&#10;Best you can do with files in browsers: <a href="http://t.co/gm7Z7kwB0J">http://t.co/gm7Z7kwB0J</a></p>&mdash; Axel Rauschmayer (@rauschma) <a href="https://twitter.com/rauschma/statuses/335016533325647872">May 16, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>I hope someone finds this helpful!</p>
]]></content>
  </entry>
  
</feed>
