<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: three.js | HTML5 Dev Gal]]></title>
  <link href="http://html5devgal.com//blog/categories/three-dot-js/atom.xml" rel="self"/>
  <link href="http://html5devgal.com//"/>
  <updated>2013-06-12T18:51:35-05:00</updated>
  <id>http://html5devgal.com//</id>
  <author>
    <name><![CDATA[Julia Jacobs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trick to get three.js camera z plane value in browser development tools console]]></title>
    <link href="http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/"/>
    <updated>2013-05-01T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console</id>
    <content type="html"><![CDATA[<p>Here’s a tip on how to get the z plane camera position in chrome’s console.</p>

<p><!-- more --></p>

<p>In this example my render DOM element container has an id of ‘video_container’.
Just replace it with yours. Also I’m using jquery so you will need to have that included in your app.</p>

<p>I attached this to a global variable (poc is the global namespace of my app) so I can just enter “poc.DebugData()” in the console.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Debug Code </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
poc.<span class="function">DebugData</span> = <span class="keyword">function</span> () {
     <span class="keyword">if</span> (<span class="predefined">$</span>(<span class="error">“</span><span class="error">#</span>video_container<span class="error">”</span>).length &amp;gt; <span class="integer">0</span>) {
         <span class="keyword">return</span> {
             <span class="error">“</span>window height<span class="error">”</span> : window.innerHeight,
             <span class="error">“</span>window width<span class="error">”</span> : window.innerWidth,
             <span class="error">“</span>camera z pos<span class="error">”</span> : Math.abs(
                 parseInt(
                     <span class="predefined">$</span>(<span class="error">“</span><span class="error">#</span>video_container<span class="error">”</span>)
                         .children(<span class="error">“</span>div<span class="error">”</span>)
                         .eq(<span class="integer">0</span>)
                         .children()[<span class="integer">0</span>]
                         .attributes.style.nodeValue
                         .split(<span class="error">‘</span>: <span class="error">‘</span>)[<span class="integer">4</span>]
                         .split(<span class="error">‘</span>) <span class="error">‘</span>)[<span class="integer">1</span>]
                         .split(<span class="error">‘</span>, <span class="error">‘</span>)[<span class="integer">14</span>]
                 )
             )
         };
     }
 };
</pre></div>
</div>
 </figure></notextile></div></p>

<p>There’s probably a cleaner way to do this but this is what I’ve got!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[three.js object and camera position tracking in real time]]></title>
    <link href="http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time/"/>
    <updated>2013-04-25T05:59:00-05:00</updated>
    <id>http://html5devgal.com//blog/2013/04/25/three-js-object-and-camera-position-tracking-in-real-time</id>
    <content type="html"><![CDATA[<p>In the “2D” world, you can inspect an element in a browser using the browser’s development
    tool (Firebug in Firefox, Chrome IE and Safari have their own) and view / tweak the css
    in realtime to move the element around.
In the CSS3D world this is <em>not</em> so easy.</p>

<p><!-- more --></p>

<p>The <a href="http://threejs.org/">three.js</a> library
is great in that it allows you to create objects, cameras, lights, etc. and position / animate
them (animating three.js objects can be achieved with <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/libs/tween.min.js">tween.js</a>)
with x, y, and z coordinates.</p>

<h3 id="d-positioning">3D positioning</h3>
<p>Basically a 3D grid has an <strong><em>x plane</em></strong> (which is horizontal), a <strong><em>y plane</em></strong>
(which is vertical) and a <strong><em>z plane</em></strong> (which is depth)</p>

<p>An object with coordinates x=0, y=0 and z=0 is smack in the <strong><em>middle</em></strong> of this grid
 * A negative coordinate on the x plane will move an element left, positive to the right
 * A negative coordinate on the y plane will move an element down, positive will move it up
 * A negative coordinate on the z plane will move an element back, positive will move it forward</p>

<p><span class='caption-wrapper'><img class='caption' src='http://www.chromesphere.com/tutorials/other/Co-ordinates/xyz%20planes_full.png' width='' height='' alt='3D Grid' title='3D Grid'><span class='caption-text'>3D Grid</span></span></p>

<p>three.js has a <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/renderers/CSS3DRenderer.js">CSS3D renderer</a>
which, magically using some very heavy matrix equations, dynamically translates x, y and z
coordinates into a css property called -webkit-transform whose values usually look like this monstrosity:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Crazy transforms </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">473.7224230277783px</span>)
   <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
      <span class="float">0</span><span class="class">.9999499917030334</span>, <span class="float">0</span>, <span class="float">-0</span><span class="class">.009999499656260014</span>, <span class="float">0</span>,
      <span class="float">0</span>, <span class="float">-1</span>, <span class="float">0</span>, <span class="float">0</span>,
      <span class="float">0</span><span class="class">.009999499656260014</span>, <span class="float">0</span>, <span class="float">0</span><span class="class">.9999499917030334</span>, <span class="float">0</span>,
      <span class="float">0</span><span class="class">.000002216018401668407</span>, <span class="float">0</span>, <span class="float">-4987</span><span class="class">.5380859375</span>, <span class="float">1</span>
   )
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">747.5px</span>, <span class="float">363.5px</span>, <span class="float">0px</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>Yick.</p>

<p>For more somewhat understandable info on matrix3d, <a href="http://9elements.com/html5demos/matrix3d/">this</a>
is probably the best documentation out there.</p>

<p>So how are you supposed to figure out the position of a camera in real time after you’ve zoomed into your app?</p>

<p>Say you want an event to fire off when the camera is close to a certain object? Or an event to
fire off only if you click on objects located in a certain z-plane coordinate?.</p>

<h3 id="tracking-objects">Tracking Objects</h3>
<p>Say you’ve got an object element with the following css:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Tranform Example </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
 <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">-50%</span>, <span class="float">-50%</span>, <span class="float">0px</span>)
 <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
 <span class="float">1</span>, <span class="float">0</span>, <span class="float">0</span>, <span class="float">0</span>,
 <span class="float">0</span>, <span class="float">-1</span>, <span class="float">0</span>, <span class="float">0</span>,
 <span class="float">0</span>, <span class="float">0</span>, <span class="float">1</span>, <span class="float">0</span>,
 <span class="float">-800</span>, <span class="float">800</span>, <span class="float">3500</span>, <span class="float">1</span>
 );
</pre></div>
</div>
 </figure></notextile></div></p>

<p><strong><em>All you really care about as far as tracking the x, y and z coordinates
            of the object’s element is the 13th, 14th and 15th values: -800, 800, 3500.</em></strong></p>

<p><span class='caption-wrapper'><img class='caption' src='/images/att-html5-u-verse-poc.png' width='' height='' alt='Object' title='Object'><span class='caption-text'>Object</span></span></p>

<p>So by viewing these coordinates we know where the object is!</p>

<p>This comes in <em>**VERY **</em>handy when tracking the camera position during navigation.</p>

<h3 id="tracking-the-camera">Tracking The Camera</h3>
<p>The camera position can be found in the second child of whatever element is defined as the ‘container’ of the scene.</p>

<p>In this example this element has an id of ‘video_container’.</p>

<p>Here’s the JavaScript code to illustrate adding a scene to an element container:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>Scene to Element Container </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="keyword">var</span> camera, scene, renderer, controls;&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;camera = new THREE.PerspectiveCamera(75, window.innerWidth </span><span class="delimiter">/</span></span> window.innerHeight, <span class="float">0.1</span>, <span class="integer">5000</span>);
<span class="comment">// camera is center &amp;amp; ‘front’ or screen - camera coordinates are opposite to object coordinates</span>
camera.position.z = <span class="integer">5000</span>; <span class="comment">// lower the number ‘closer’ to objects</span>
camera.position.x = -<span class="integer">25</span>; <span class="comment">// lower the number more to the right</span>
camera.position.y = <span class="integer">0</span>; <span class="comment">// lower the number the more up</span>
scene = <span class="keyword">new</span> THREE.Scene();
<span class="comment">// CSS3D renderer</span>
renderer = <span class="keyword">new</span> THREE.CSS3DRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.domElement.style.position = <span class="error">‘</span>absolute<span class="error">’</span>;&lt;<span class="regexp"><span class="delimiter">/</span><span class="content">p&gt;

&lt;p&gt;document.getElementById(‘video_container’).appendChild(renderer.domElement);
</span></span></pre></div>
</div>
 </figure></notextile></div></p>

<p>Here’s the element in the markup, shown in Chrome’s Developer Tools:</p>

<p><span class='caption-wrapper'><img class='caption' src='/images/cameraobject.png' width='' height='' alt='Chrome Developer Tools' title='Chrome Developer Tools'><span class='caption-text'>Chrome Developer Tools</span></span></p>

<p>Here’s the CSS matrix3D values:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption class='code-header' style='margin-bottom:-5px;'><span>3D Transforms Example </span></figcaption>
 <div class="CodeRay">
  <div class="code"><pre>
<span class="type">-webkit-transform</span>:
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">0px</span>, <span class="float">0px</span>, <span class="float">445.70307751169236px</span>)
   <span class="error">m</span><span class="error">a</span><span class="error">t</span><span class="error">r</span><span class="error">i</span><span class="error">x</span><span class="float">3</span><span class="error">d</span>(
      <span class="float">0</span><span class="class">.9999875426292419</span>, <span class="float">0</span>, <span class="float">-0</span><span class="class">.004999937489628792</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">-1</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">0</span><span class="class">.004999937489628792</span>,
      <span class="float">0</span>, <span class="float">0</span><span class="class">.9999875426292419</span>, <span class="float">0</span>,
      <span class="float">0</span>, <span class="float">0</span>, <span class="float">-5000</span><span class="class">.0625</span>, <span class="float">1</span>
   )
   <span class="error">t</span><span class="error">r</span><span class="error">a</span><span class="error">n</span><span class="error">s</span><span class="error">l</span><span class="error">a</span><span class="error">t</span><span class="error">e</span><span class="float">3</span><span class="error">d</span>(<span class="float">747.5px</span>, <span class="float">342px</span>, <span class="float">0px</span>);
</pre></div>
</div>
 </figure></notextile></div></p>

<p>As you can see the camera coordinates in the JavaScript code shows z = 5000,
but in the css z = -5000.0625, a <strong><em>NEGATIVE</em></strong> value.</p>

<p>What gives?</p>

<p>Because the camera is ‘facing’ <strong><em>toward</em></strong> the grid and the objects in the grid,
the negative and positive values of the x, y, and z coordinates are OPPOSITE of the actual grid and objects.
So the way it works in the three.js library is:
 * +x moves the camera to the LEFT of the grid whereas -z moves the camera to the RIGHT
 * +y moves the camera DOWN in the grid whereas -z moves the camera UP
 * +z moves the camera AWAY from the grid whereas -z moves the camera CLOSER</p>

<p><strong><em>UPDATE</em></strong>
I just was honored with a tweet from the great Ricardo Cabello Miguel aka <a href="http://www.mrdoob.com/">mr.doob</a>,
creator of three.js, about a better way to get the cameras position in relationship to an object:</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p><a href="https://twitter.com/jewelsjacobs">@jewelsjacobs</a> I think you are making things harder than they are... why not just camera.position.distanceTo( object.position )?</p>&mdash; Mr.d ͡° ͜ʖ ͡°b (@mrdoob) <a href="https://twitter.com/mrdoob/statuses/327555248531050497">April 25, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>

<p>Unfortunately, I can’t really use this for realtime results during navigation
because my camera and object position code is in global variables in a different
files order to make things more modular.
Setting breakpoints in the browser or
entering it in the console isn’t quote working for me. To just get the camera z-plane
value in the browser console check out
  <a href="/blog/2013/05/01/trick-to-get-three-js-camera-z-plane-value-in-browser-development-tools-console/">this post</a></p>

<p><strong><em>AN IMPORTANT NOTE ABOUT TRACKBALL / TOUCH CONTROLS AND THE CAMERA Z POSITION:</em></strong>
To facilitate scroll wheel, trackball and touch zoom controls, a three.js utility
library
called <a href="https://raw.github.com/mrdoob/three.js/master/examples/js/controls/TrackballControls.js">Trackball Controls</a>
can be used.
Make sure all of your objects have <strong><em>POSITIVE</em></strong> z coordinate values.
If they don’t the camera will never reach them as it can only zoom up to
z coordinate = 0. Once the camera has z = 0 you will keep pinching / scrolling forever and go no where.</p>
]]></content>
  </entry>
  
</feed>
